import React, { Component } from 'react';
import { Point } from './interface';
/** for props check */
export interface PickerProps {
    borderColor?: string | undefined;
    pointerColor?: string | undefined;
    pointerWidth?: number | undefined;
    width?: number | undefined;
    value?: number;
    borderStyle?: string | undefined;
    borderWidth?: number | undefined;
    onChange?: (newValue: number) => void | undefined;
    onAfterChange?: (interactiveValue: number) => void | undefined;
    preventDefault?: boolean;
}
interface PickerState {
    angle: number;
}
export default class AnglePicker extends Component<PickerProps, PickerState> {
    constructor(props: PickerProps);
    wrapperRef: React.RefObject<HTMLDivElement>;
    static getDerivedStateFromProps(props: PickerProps, state: PickerState): {
        angle: number;
    } | null;
    getCenter(): Point;
    getStartPoint(): Point;
    getRotatedPosition(angle: number): {
        x: number;
        y: number;
    };
    getNewAngleByEvent: (e: MouseEvent | React.MouseEvent) => number | null;
    mousedown: React.MouseEventHandler<HTMLDivElement>;
    addMouseListeners(): void;
    removeMouseListeners(): void;
    mousemove(e: MouseEvent): void;
    mouseup(e: MouseEvent): void;
    render(): React.JSX.Element;
}
export {};
