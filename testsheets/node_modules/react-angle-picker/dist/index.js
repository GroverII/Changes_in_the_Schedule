'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var styled = require('styled-components');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : String(i);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

var BORDER_WIDTH = 1;
var WIDTH = 30;
var CIRCLE_WIDTH = 6;

var _templateObject, _templateObject2;
var CircleWrapper = styled__default['default'].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  width: 0;\n  height: 0;\n  left: ", "px;\n  top: ", "px;\n"])), function (props) {
  return props.left;
}, function (props) {
  return props.top;
});
var IconCircle = styled__default['default'].div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: ", "px;\n  height: ", "px;\n  background: ", ";\n  -webkit-border-radius: 50%;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n"])), function (props) {
  return props.width || CIRCLE_WIDTH;
}, function (props) {
  return props.width || CIRCLE_WIDTH;
}, function (props) {
  return props.color ? props.color : 'rgba(0,0,0,0.4)';
});
var Circle = function Circle(props) {
  var x = props.x,
    y = props.y,
    color = props.color,
    width = props.width;
  return /*#__PURE__*/React__default['default'].createElement(CircleWrapper, {
    left: x,
    top: y
  }, /*#__PURE__*/React__default['default'].createElement(IconCircle, {
    color: color,
    width: width
  }));
};

var getStartPoint = function getStartPoint(width, circleWidth, borderWidth) {
  return {
    x: width - circleWidth / 2 - borderWidth * 2,
    y: width / 2 - borderWidth
  };
};
var getCenter = function getCenter(width, borderWidth) {
  return {
    x: width / 2 - borderWidth,
    y: width / 2 - borderWidth
  };
};
// 弧度转角度
var radianToAngle = function radianToAngle(radian) {
  var angle = Math.round(radian * 180 / Math.PI);
  if (angle < 0) {
    return 360 + angle;
  }
  return angle;
};

var _templateObject$1;
var Border = styled__default['default'].div(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n  width: ", "px;\n  height: ", "px;\n  position: relative;\n  border: ", "px\n    ", "\n    ", ";\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.16);\n  border-radius: 50%;\n  box-sizing: border-box;\n"])), function (props) {
  return props.width || WIDTH;
}, function (props) {
  return props.width || WIDTH;
}, function (props) {
  return typeof props.borderWidth === 'number' ? props.borderWidth : 1;
}, function (props) {
  return props.borderStyle || 'solid';
}, function (props) {
  return props.borderColor || '#ccc';
});

var AnglePicker = /*#__PURE__*/function (_Component) {
  _inherits(AnglePicker, _Component);
  function AnglePicker(props) {
    var _this;
    _classCallCheck(this, AnglePicker);
    _this = _callSuper(this, AnglePicker, [props]);
    _this.wrapperRef = /*#__PURE__*/React__default['default'].createRef();
    // 计算点击位置的角度
    _this.getNewAngleByEvent = function (e) {
      var wrapperEl = _this.wrapperRef && _this.wrapperRef.current;
      if (e && wrapperEl) {
        var center = _this.getCenter();
        var clientX = e.clientX,
          clientY = e.clientY;
        var rect = wrapperEl.getClientRects()[0];
        var x = rect.x,
          y = rect.y;
        // 中心点坐标
        var centerP = {
          x: x + center.x,
          y: y + center.y
        };
        // 计算弧度
        var nx = clientX - centerP.x;
        var ny = clientY - centerP.y;
        var radian = Math.atan2(ny, nx);
        return radianToAngle(radian);
      }
      return null;
    };
    _this.mousedown = function (e) {
      var angle = _this.getNewAngleByEvent(e);
      if (typeof angle === 'number') {
        _this.setState({
          angle: angle
        });
        if (_this.props.onChange) {
          _this.props.onChange(angle);
        }
        _this.addMouseListeners();
      }
    };
    _this.state = {
      angle: props.value || 0
    };
    _this.mousemove = _this.mousemove.bind(_assertThisInitialized(_this));
    _this.mouseup = _this.mouseup.bind(_assertThisInitialized(_this));
    _this.getStartPoint = _this.getStartPoint.bind(_assertThisInitialized(_this));
    _this.getCenter = _this.getCenter.bind(_assertThisInitialized(_this));
    _this.getRotatedPosition = _this.getRotatedPosition.bind(_assertThisInitialized(_this));
    _this.getNewAngleByEvent = _this.getNewAngleByEvent.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(AnglePicker, [{
    key: "getCenter",
    value: function getCenter$1() {
      var _this$props = this.props,
        _this$props$width = _this$props.width,
        width = _this$props$width === void 0 ? WIDTH : _this$props$width,
        _this$props$borderWid = _this$props.borderWidth,
        borderWidth = _this$props$borderWid === void 0 ? BORDER_WIDTH : _this$props$borderWid;
      return getCenter(width, borderWidth);
    }
  }, {
    key: "getStartPoint",
    value: function getStartPoint$1() {
      var _this$props2 = this.props,
        _this$props2$width = _this$props2.width,
        width = _this$props2$width === void 0 ? WIDTH : _this$props2$width,
        _this$props2$pointerW = _this$props2.pointerWidth,
        pointerWidth = _this$props2$pointerW === void 0 ? CIRCLE_WIDTH : _this$props2$pointerW,
        _this$props2$borderWi = _this$props2.borderWidth,
        borderWidth = _this$props2$borderWi === void 0 ? BORDER_WIDTH : _this$props2$borderWi;
      return getStartPoint(width, pointerWidth, borderWidth);
    }
  }, {
    key: "getRotatedPosition",
    value: function getRotatedPosition(angle) {
      var center = this.getCenter();
      var startPoint = this.getStartPoint();
      var theta = angle / 180 * Math.PI;
      var x = (startPoint.x - center.x) * Math.cos(theta) - (startPoint.y - center.y) * Math.sin(theta) + center.x;
      var y = (startPoint.x - center.x) * Math.sin(theta) + (startPoint.y - center.y) * Math.cos(theta) + center.y;
      return {
        x: x,
        y: y
      };
    }
  }, {
    key: "addMouseListeners",
    value: function addMouseListeners() {
      document.addEventListener('mousemove', this.mousemove);
      document.addEventListener('mouseup', this.mouseup);
      document.addEventListener('contextmenu', this.mouseup);
      document.addEventListener('pointercancel', this.mouseup);
    }
  }, {
    key: "removeMouseListeners",
    value: function removeMouseListeners() {
      document.removeEventListener('mousemove', this.mousemove);
      document.removeEventListener('mouseup', this.mouseup);
    }
  }, {
    key: "mousemove",
    value: function mousemove(e) {
      if (this.props.preventDefault) {
        e.preventDefault();
      }
      var angle = this.getNewAngleByEvent(e);
      if (typeof angle === 'number') {
        this.setState({
          angle: angle
        });
        if (this.props.onChange) {
          this.props.onChange(angle);
        }
      }
    }
  }, {
    key: "mouseup",
    value: function mouseup(e) {
      if (this.props.preventDefault) {
        e.preventDefault();
      }
      this.removeMouseListeners();
      var angle = this.getNewAngleByEvent(e);
      if (typeof angle === 'number') {
        this.setState({
          angle: angle
        });
        if (this.props.onAfterChange) {
          this.props.onAfterChange(angle);
        } else if (this.props.onChange) {
          this.props.onChange(angle);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var angle = this.state.angle;
      var _this$props3 = this.props,
        pointerColor = _this$props3.pointerColor,
        pointerWidth = _this$props3.pointerWidth,
        width = _this$props3.width,
        borderColor = _this$props3.borderColor,
        borderStyle = _this$props3.borderStyle,
        borderWidth = _this$props3.borderWidth;
      var getRotatedPosition = this.getRotatedPosition,
        mousedown = this.mousedown;
      var rotatedPosition = getRotatedPosition(angle);
      return /*#__PURE__*/React__default['default'].createElement(Border, {
        ref: this.wrapperRef,
        onMouseDown: mousedown,
        width: width,
        borderColor: borderColor,
        borderStyle: borderStyle,
        borderWidth: borderWidth
      }, /*#__PURE__*/React__default['default'].createElement(Circle, {
        x: rotatedPosition.x,
        y: rotatedPosition.y,
        color: pointerColor,
        width: pointerWidth
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (typeof props.value === 'number' && state.angle !== props.value) {
        return {
          angle: props.value
        };
      }
      return null;
    }
  }]);
  return AnglePicker;
}(React.Component);

exports.ReactAnglePicker = AnglePicker;
