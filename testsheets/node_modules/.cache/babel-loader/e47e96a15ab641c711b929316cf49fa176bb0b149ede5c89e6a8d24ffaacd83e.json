{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\adminToServer.js\",\n  _s = $RefreshSig$();\n// adminToServer.js\nimport { useDrag } from 'react-dnd';\nimport ReactPlayer from 'react-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const url = 'http://localhost:3001/'; // Замените на ваш URL сервера, если нужно\n\n// Функция для определения типа файла на основе его расширения\nexport const getFileType = fileName => {\n  const extension = fileName.split('.').pop();\n  switch (extension.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n    case 'png':\n    case 'gif':\n      return 'foto';\n    case 'mp4':\n    case 'avi':\n    case 'mkv':\n    case 'mov':\n      return 'video';\n    case 'txt':\n    case 'doc':\n    case 'docx':\n    case 'pdf':\n      return 'text';\n    default:\n      return null;\n    // Неизвестный тип файла\n  }\n};\nexport const getSourcesList = async folderName => {\n  try {\n    const response = await fetch(url + `getAllSourcesDir/${folderName}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting sources list:', error);\n    throw error;\n  }\n};\nexport const getAllFileFolders = async () => {\n  try {\n    const response = await fetch(url + 'getAllSourcesDir');\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting folders:', error);\n    throw error;\n  }\n};\nexport const renameFolder = async (folderName, newFolderName) => {\n  return await fetch(`${url}renameSourceDir/${encodeURIComponent(folderName)}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      newFolderName: newFolderName\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Kļūda, mainot mapes nosaukumu');\n    }\n    return response.json();\n  });\n};\nexport const addSourceFolder = async folderName => {\n  try {\n    const response = await fetch(url + 'addSourceDir/' + folderName, {\n      method: 'POST'\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding folder:', error);\n    throw error;\n  }\n};\nexport const deleteSourceFolder = async fileName => {\n  try {\n    const response = await fetch(url + `deleteSourceDir/${fileName}`, {\n      method: 'DELETE'\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error deleting folder:', error);\n    throw error;\n  }\n};\nexport const getFileDisplay = file => {\n  switch (file.type) {\n    case 'text':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `${url}getSource/${file.file}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"previewItemLink\",\n        children: file.file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this);\n    case 'URL(foto)':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: file.file,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: file.file,\n          alt: `Attēls ${file.index}`,\n          className: \"previewImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this);\n    case 'URL(video)':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: file.file,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: file.file,\n          width: \"100%\",\n          height: \"7.4vh\",\n          playing: true,\n          controls: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this);\n    case 'foto':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url + `getSource/${file.file}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: url + `getSource/${file.file}`,\n          alt: `Attēls ${file.index}`,\n          className: \"previewImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this);\n    case 'video':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url + `getSource/${file.file}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          src: url + `getSource/${file.file}`,\n          controls: true,\n          className: \"previewVideo\",\n          autoPlay: true,\n          loop: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: url + `getSource/${file.file}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this);\n  }\n};\nexport function isValidURL(string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\nexport const getFileTypeFromURL = async url => {\n  try {\n    const response = await fetch(url);\n    const contentType = response.headers.get('content-type');\n    if (url.includes('youtu.be') || url.includes('youtube.com')) {\n      return 'URL(video)';\n    } else if (contentType && contentType.includes('image')) {\n      return 'URL(foto)';\n    } else if (contentType && contentType.includes('video')) {\n      return 'URL(video)';\n    } else {\n      return null; // Неизвестный тип файла\n    }\n  } catch (error) {\n    console.error('Error fetching URL:', error);\n    return null;\n  }\n};\nexport const updateConfig = async updates => {\n  try {\n    const response = await fetch(url + 'updateConfig', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating config:', error);\n    throw error;\n  }\n};\nexport const deleteSource = async (selectedFolder, type, fileName) => {\n  try {\n    const encodedFileName = encodeURIComponent(fileName);\n    const response = await fetch(url + `deleteSource/${selectedFolder}/${type}/${encodedFileName}`, {\n      method: 'DELETE'\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting file:', error);\n    throw error;\n  }\n};\nexport function DraggableItem({\n  index,\n  type,\n  handleDrag,\n  children\n}) {\n  _s();\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  drag(handleDrag(index, type));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drag,\n    style: {\n      opacity: isDragging ? 0.5 : 1\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 9\n  }, this);\n}\n_s(DraggableItem, \"wuumsFp4qAni9XRJfRhQAZjuD/k=\", false, function () {\n  return [useDrag];\n});\n_c = DraggableItem;\nexport const authenticate = async (login, password, recaptchaToken) => {\n  try {\n    // Отправляем данные на сервер для аутентификации\n    const response = await fetch(url + 'login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login: login,\n        password: password,\n        recaptchaToken: recaptchaToken\n      })\n    });\n\n    // Возвращаем результат аутентификации\n    return response;\n  } catch (error) {\n    // Если произошла ошибка, возвращаем ее\n    throw error;\n  }\n};\nexport const changeLogin = async (oldLogin, newLogin, password) => {\n  try {\n    const response = await fetch(url + 'changelogin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        oldLogin,\n        newLogin,\n        password\n      })\n    });\n    if (response.ok) {\n      return {\n        success: true\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Failed to update login'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: 'Network error. Failed to update login'\n    };\n  }\n};\nexport const runCSharpScript = async () => {\n  try {\n    const response = await fetch(url + 'runCSharpScript', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to run C# script on the server. HTTP status: ${response.status}`);\n    }\n    const jsonData = await response.json();\n    if (!jsonData.data.trim()) {\n      console.error('Empty response data received from the server.');\n      return;\n    }\n    let dataArray;\n    try {\n      dataArray = JSON.parse(jsonData.data);\n    } catch (parseError) {\n      throw new Error(`Error parsing JSON data: ${parseError}`);\n    }\n    if (!Array.isArray(dataArray)) {\n      throw new Error(`Data is not an array: ${dataArray}`);\n    }\n    return dataArray;\n  } catch (error) {\n    throw new Error(`Error during C# script execution: ${error}`);\n  }\n};\nexport const getConfig = async () => {\n  try {\n    const response = await fetch(url + 'getConfig');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch configuration. HTTP status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.config;\n  } catch (error) {\n    throw new Error(`Error fetching configuration: ${error}`);\n  }\n};\nexport const getCSharpScriptConfigAsnc = async () => {\n  try {\n    const response = await fetch(url + 'getCSharpScriptConfig');\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw new Error(`Error fetching C# Script configuration: ${error}`);\n  }\n};\nexport const updateStyles = async bodyData => {\n  try {\n    const response = await fetch(url + 'updateStyles', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyData)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error updating styles:', error);\n  }\n};\nexport const applyTableStylesAsync = async (headerStyles, cellStyles) => {\n  try {\n    const headerStylesToSend = {\n      fontSize: headerStyles.fontSize,\n      fontFamily: headerStyles.fontFamily,\n      fontWeight: headerStyles.fontWeight,\n      color: headerStyles.color // Добавьте цвет для заголовка, если это необходимо\n      // Другие свойства, если есть\n    };\n    const cellStylesToSend = {\n      fontSize: cellStyles.fontSize,\n      fontFamily: cellStyles.fontFamily,\n      fontWeight: cellStyles.fontWeight,\n      color: cellStyles.color // Добавьте цвет для ячеек, если это необходимо\n      // Другие свойства, если есть\n    };\n    const response = await fetch(url + 'updateStyles', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        headerStyles: headerStylesToSend,\n        cellStyles: cellStylesToSend\n      })\n    });\n    const data = await response.json();\n    return data; // Возвращаем данные для обработки на стороне клиента\n  } catch (error) {\n    console.error('Error applying table styles:', error);\n    throw error; // Перехватываем ошибку и пробрасываем её дальше\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"DraggableItem\");","map":{"version":3,"names":["useDrag","ReactPlayer","jsxDEV","_jsxDEV","url","getFileType","fileName","extension","split","pop","toLowerCase","getSourcesList","folderName","response","fetch","json","error","console","getAllFileFolders","renameFolder","newFolderName","encodeURIComponent","method","headers","body","JSON","stringify","then","ok","Error","addSourceFolder","deleteSourceFolder","getFileDisplay","file","type","href","target","rel","className","children","_jsxFileName","lineNumber","columnNumber","src","alt","index","width","height","playing","controls","muted","autoPlay","loop","isValidURL","string","URL","_","getFileTypeFromURL","contentType","get","includes","updateConfig","updates","deleteSource","selectedFolder","encodedFileName","DraggableItem","handleDrag","_s","isDragging","drag","item","collect","monitor","ref","style","opacity","_c","authenticate","login","password","recaptchaToken","changeLogin","oldLogin","newLogin","success","runCSharpScript","status","jsonData","data","trim","dataArray","parse","parseError","Array","isArray","getConfig","config","getCSharpScriptConfigAsnc","updateStyles","bodyData","applyTableStylesAsync","headerStyles","cellStyles","headerStylesToSend","fontSize","fontFamily","fontWeight","color","cellStylesToSend","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/adminToServer.js"],"sourcesContent":["// adminToServer.js\r\nimport { useDrag } from 'react-dnd';\r\nimport ReactPlayer from 'react-player';\r\n\r\nexport const url = 'http://localhost:3001/'; // Замените на ваш URL сервера, если нужно\r\n\r\n// Функция для определения типа файла на основе его расширения\r\nexport const getFileType = (fileName) => {\r\n    const extension = fileName.split('.').pop();\r\n    switch (extension.toLowerCase()) {\r\n        case 'jpg':\r\n        case 'jpeg':\r\n        case 'png':\r\n        case 'gif':\r\n            return 'foto';\r\n        case 'mp4':\r\n        case 'avi':\r\n        case 'mkv':\r\n        case 'mov':\r\n            return 'video';\r\n        case 'txt':\r\n        case 'doc':\r\n        case 'docx':\r\n        case 'pdf':\r\n            return 'text';\r\n        default:\r\n            return null; // Неизвестный тип файла\r\n    }\r\n};\r\n\r\nexport const getSourcesList = async (folderName) => {\r\n    try {\r\n        const response = await fetch(url + `getAllSourcesDir/${folderName}`);\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error getting sources list:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const getAllFileFolders = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getAllSourcesDir');\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error getting folders:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const renameFolder = async (folderName, newFolderName) => {\r\n    return await fetch(`${url}renameSourceDir/${encodeURIComponent(folderName)}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ newFolderName: newFolderName })\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Kļūda, mainot mapes nosaukumu');\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\nexport const addSourceFolder = async (folderName) => {\r\n    try {\r\n        const response = await fetch(url + 'addSourceDir/' + folderName, {\r\n            method: 'POST'\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error adding folder:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const deleteSourceFolder = async (fileName) => {\r\n    try {\r\n        const response = await fetch(url + `deleteSourceDir/${fileName}`, {\r\n            method: 'DELETE',\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error deleting folder:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getFileDisplay = (file) => {\r\n    switch (file.type) {\r\n        case 'text':\r\n            return (\r\n                <a href={`${url}getSource/${file.file}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"previewItemLink\">\r\n                    {file.file}\r\n                </a>\r\n            );\r\n        case 'URL(foto)':\r\n            return (\r\n                <a href={file.file} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src={file.file} alt={`Attēls ${file.index}`} className=\"previewImage\" />\r\n                </a>\r\n            );\r\n        case 'URL(video)':\r\n            return (\r\n                <a href={file.file} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <ReactPlayer\r\n                        url={file.file}\r\n                        width=\"100%\"\r\n                        height=\"7.4vh\"\r\n                        playing\r\n                        controls\r\n                        muted\r\n                    />\r\n                </a>\r\n            );\r\n        case 'foto':\r\n            return (\r\n                <a href={url + `getSource/${file.file}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src={url + `getSource/${file.file}`} alt={`Attēls ${file.index}`} className=\"previewImage\" />\r\n                </a>\r\n            );\r\n        case 'video':\r\n            return (\r\n                <a href={url + `getSource/${file.file}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <video src={url + `getSource/${file.file}`} controls className=\"previewVideo\" autoPlay loop muted />\r\n                </a>\r\n            );\r\n        default:\r\n            return (\r\n                <div>{url + `getSource/${file.file}`}</div>\r\n            );\r\n    }\r\n};\r\n\r\nexport function isValidURL(string) {\r\n    try {\r\n        new URL(string);\r\n        return true;\r\n    } catch (_) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const getFileTypeFromURL = async (url) => {\r\n    try {\r\n        const response = await fetch(url);\r\n        const contentType = response.headers.get('content-type');\r\n        if (url.includes('youtu.be') || url.includes('youtube.com')) {\r\n            return 'URL(video)';\r\n        } else if (contentType && contentType.includes('image')) {\r\n            return 'URL(foto)';\r\n        } else if (contentType && contentType.includes('video')) {\r\n            return 'URL(video)';\r\n        } else {\r\n            return null; // Неизвестный тип файла\r\n        }\r\n    } catch (error) {\r\n        console.error('Error fetching URL:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const updateConfig = async (updates) => {\r\n    try {\r\n        const response = await fetch(url + 'updateConfig', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(updates)\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error updating config:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const deleteSource = async (selectedFolder, type, fileName) => {\r\n    try {\r\n        const encodedFileName = encodeURIComponent(fileName);\r\n\r\n        const response = await fetch(url + `deleteSource/${selectedFolder}/${type}/${encodedFileName}`, {\r\n            method: 'DELETE',\r\n        });\r\n        return response.ok;\r\n    } catch (error) {\r\n        console.error('Error deleting file:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport function DraggableItem({ index, type, handleDrag, children }) {\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type, index },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    drag(handleDrag(index, type));\r\n\r\n    return (\r\n        <div ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport const authenticate = async (login, password, recaptchaToken) => {\r\n    try {\r\n        // Отправляем данные на сервер для аутентификации\r\n        const response = await fetch(url + 'login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                login: login,\r\n                password: password,\r\n                recaptchaToken: recaptchaToken\r\n            }),\r\n        });\r\n\r\n        // Возвращаем результат аутентификации\r\n        return response;\r\n    } catch (error) {\r\n        // Если произошла ошибка, возвращаем ее\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const changeLogin = async (oldLogin, newLogin, password) => {\r\n    try {\r\n        const response = await fetch(url + 'changelogin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ oldLogin, newLogin, password }),\r\n        });\r\n\r\n        if (response.ok) {\r\n            return { success: true };\r\n        } else {\r\n            return { success: false, error: 'Failed to update login' };\r\n        }\r\n    } catch (error) {\r\n        return { success: false, error: 'Network error. Failed to update login' };\r\n    }\r\n};\r\n\r\nexport const runCSharpScript = async () => {\r\n    try {\r\n        const response = await fetch(url + 'runCSharpScript', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to run C# script on the server. HTTP status: ${response.status}`);\r\n        }\r\n\r\n        const jsonData = await response.json();\r\n\r\n        if (!jsonData.data.trim()) {\r\n            console.error('Empty response data received from the server.');\r\n            return;\r\n        }\r\n\r\n        let dataArray;\r\n\r\n        try {\r\n            dataArray = JSON.parse(jsonData.data);\r\n        } catch (parseError) {\r\n            throw new Error(`Error parsing JSON data: ${parseError}`);\r\n        }\r\n\r\n        if (!Array.isArray(dataArray)) {\r\n            throw new Error(`Data is not an array: ${dataArray}`);\r\n        }\r\n\r\n        return dataArray;\r\n    } catch (error) {\r\n        throw new Error(`Error during C# script execution: ${error}`);\r\n    }\r\n};\r\n\r\nexport const getConfig = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getConfig');\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to fetch configuration. HTTP status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.config;\r\n    } catch (error) {\r\n        throw new Error(`Error fetching configuration: ${error}`);\r\n    }\r\n};\r\n\r\nexport const getCSharpScriptConfigAsnc = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getCSharpScriptConfig');\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Error fetching C# Script configuration: ${error}`);\r\n    }\r\n};\r\n\r\nexport const updateStyles = async (bodyData) => {\r\n    try {\r\n        const response = await fetch(url + 'updateStyles', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(bodyData)\r\n        });\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error updating styles:', error);\r\n    }\r\n};\r\n\r\nexport const applyTableStylesAsync = async (headerStyles, cellStyles) => {\r\n    try {\r\n        const headerStylesToSend = {\r\n            fontSize: headerStyles.fontSize,\r\n            fontFamily: headerStyles.fontFamily,\r\n            fontWeight: headerStyles.fontWeight,\r\n            color: headerStyles.color // Добавьте цвет для заголовка, если это необходимо\r\n            // Другие свойства, если есть\r\n        };\r\n        const cellStylesToSend = {\r\n            fontSize: cellStyles.fontSize,\r\n            fontFamily: cellStyles.fontFamily,\r\n            fontWeight: cellStyles.fontWeight,\r\n            color: cellStyles.color // Добавьте цвет для ячеек, если это необходимо\r\n            // Другие свойства, если есть\r\n        };\r\n        const response = await fetch(url + 'updateStyles', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ headerStyles: headerStylesToSend, cellStyles: cellStylesToSend })\r\n        });\r\n        const data = await response.json();\r\n        return data; // Возвращаем данные для обработки на стороне клиента\r\n    } catch (error) {\r\n        console.error('Error applying table styles:', error);\r\n        throw error; // Перехватываем ошибку и пробрасываем её дальше\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}