{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Linkify from 'react-linkify';\nimport ReactPlayer from 'react-player';\nimport DataTable from './Data_table';\nimport './styles.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sourceList, setSourceList] = useState([]);\n  const [currentTime, setCurrentTime] = useState(getFormattedTime());\n  const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n  const [currentDate, setCurrentDate] = useState(getFormattedDate());\n  const [currentPage, setCurrentPage] = useState(1);\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [itemsPerPage] = useState(20);\n  const url = 'http://localhost:3001/';\n  const [renderedContent, setRenderedContent] = useState(null);\n  const [renderedButtons, setRenderedButtons] = useState(null);\n  const renderAsyncContent = async () => {\n    if (sourceList.length === 0) {\n      return null; // Переосмыслите, что возвращать в этом случае, например, заглушку или загрузочный индикатор\n    }\n    const content = await renderContent();\n    setRenderedContent(content);\n  };\n  const renderContent = async () => {\n    if (currentPage > totalPages) {\n      const sourceIndex = currentPage - totalPages - 1;\n      const source = sourceList[sourceIndex];\n      const request = url + \"getImage/\" + source;\n      let extension = \"\";\n      if (source) extension = source.split(\".\")[1];else return null;\n      if (sourceIndex >= 0 && sourceIndex < sourceList.length && extension !== \"txt\") {\n        if (extension !== \"mp4\") {\n          try {\n            const response = await fetch(request);\n            console.log('HTTP status:', response.status);\n            if (response.ok) {\n              const blobData = await response.blob();\n              const imageUrl = URL.createObjectURL(blobData);\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imageUrl,\n                alt: `Sheet ${currentPage}`,\n                className: \"photoImage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 33\n              }, this);\n            } else {\n              // обработка ошибок\n              console.error('Error fetching image:', response.status);\n              return null;\n            }\n          } catch (error) {\n            console.error('Error fetching image:', error);\n            return null;\n          }\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"video\", {\n            className: \"videoPlayer\",\n            autoPlay: true,\n            loop: true,\n            children: [/*#__PURE__*/_jsxDEV(\"source\", {\n              src: `${request}`,\n              type: \"video/mp4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"source\", {\n              src: `${request}`,\n              type: \"video/ogg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), \"Your browser does not support the video tag.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this);\n        }\n      } else {\n        const txtFileRequest = await fetch(url + \"getImage/\" + source);\n        if (txtFileRequest.ok) {\n          const txtContent = await txtFileRequest.text();\n          const linkedContent = txtContent.split('\\n');\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: linkedContent.map((line, index) => {\n              const isYouTubeLink = line.includes('youtu.be');\n              const isImageLink = line.match(/\\.(jpeg|jpg|gif|png)$/);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Linkify, {\n                  children: line\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 41\n                }, this), isYouTubeLink && /*#__PURE__*/_jsxDEV(ReactPlayer, {\n                  url: line,\n                  width: \"300px\",\n                  height: \"200px\",\n                  playing: true,\n                  muted: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 45\n                }, this), isImageLink && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: line,\n                  alt: `Image ${index}`\n                }, `img-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this);\n        } else {\n          // Обработка ошибки получения файла .txt\n          console.error('Error fetching .txt file:', txtFileRequest.status);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Error fetching .txt file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 28\n          }, this);\n        }\n      }\n    } else {\n      // код для отображения таблицы данных\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: currentTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"AIZVIETO\\u0160ANAS LAPA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentDateLV\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"fl-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Aizvietot\\u0101js\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Stunda\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Klase\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Kab.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Prome\\u0161osais skolot\\u0101js\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Piez\\u012Bmes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              className: \"dataBody\",\n              children: sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => /*#__PURE__*/_jsxDEV(DataTable, {\n                data: data,\n                currentDate: currentDate\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  useEffect(() => {\n    if (sourceList.length > 0) {\n      renderAsyncContent();\n      renderPageNumbersAsync();\n    }\n  }, [currentPage, sourceList]);\n  useEffect(() => {\n    const fetchPhotoList = async () => {\n      try {\n        const response = await fetch(url + 'getPhotoList');\n        if (!response.ok) {\n          console.error('Failed to fetch photo list. HTTP status:', response.status);\n          throw new Error('Failed to fetch photo list');\n        }\n        const {\n          photoList\n        } = await response.json();\n        setSourceList(photoList);\n        renderAsyncContent(); // Вызываем renderAsyncContent после установки sourceList\n        renderPageNumbersAsync(); // Вызываем renderPageNumbersAsync после установки sourceList\n        setCurrentPage(1);\n      } catch (error) {\n        console.error('Error fetching photo list:', error);\n      }\n    };\n\n    // Запускаем функцию для получения списка фото\n    fetchPhotoList();\n  }, []);\n  const PageButton = ({\n    onClick,\n    isActive\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    className: `button-81 ${isActive ? 'active' : ''}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n  function getFormattedTime() {\n    const currentDate = new Date();\n    const hours = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const seconds = currentDate.getSeconds();\n    const formattedHours = String(hours).padStart(2, '0');\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(seconds).padStart(2, '0');\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  }\n  function getFormattedDate(date) {\n    if (!date) {\n      date = new Date();\n    }\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}.`;\n  }\n  function getFormattedLatvianDate() {\n    const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n    const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n    const currentDate = new Date();\n    const dayOfWeek = daysOfWeek[currentDate.getDay()];\n    const dayOfMonth = currentDate.getDate();\n    const month = months[currentDate.getMonth()];\n    return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n  }\n  const updateCurrentTime = useCallback(() => {\n    setCurrentTime(getFormattedTime());\n  }, []);\n  const updateCurrentDate = useCallback(() => {\n    setCurrentDate(getFormattedDate());\n  }, []);\n  const updateCurrentDateLV = useCallback(() => {\n    setCurrentDateLV(getFormattedLatvianDate());\n  }, []);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n  const romanToNumber = roman => {\n    const romanNumeralMap = {\n      I: 1,\n      II: 2,\n      III: 3\n    };\n    return romanNumeralMap[roman] || 0;\n  };\n  const sortData = (data, columns) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => {\n      for (let i = 0; i < columns.length; i++) {\n        const column = columns[i];\n        const valueA = a[column] || '';\n        const valueB = b[column] || '';\n        if (column === 'class') {\n          const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n          const matchA = valueA.match(regex);\n          const matchB = valueB.match(regex);\n          if (matchA && matchB) {\n            const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n            if (numComparison !== 0) {\n              return numComparison;\n            }\n            const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n            if (romanComparison !== 0) {\n              return romanComparison;\n            }\n            return matchA[2].localeCompare(matchB[2], 'en', {\n              sensitivity: 'base'\n            });\n          } else {\n            return 0;\n          }\n        } else {\n          const comparison = valueA.localeCompare(valueB, 'en', {\n            sensitivity: 'base'\n          });\n          if (comparison !== 0) {\n            return comparison;\n          }\n        }\n      }\n      return 0;\n    });\n    return sortedData;\n  };\n  useEffect(() => {\n    const runCSharpScript = async () => {\n      try {\n        console.log('Sending a POST request to run C# script...');\n        const response = await fetch(url + 'runCSharpScript', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Server response received:', response);\n        if (!response.ok) {\n          console.error('Failed to run C# script on the server. HTTP status:', response.status);\n          throw new Error('Failed to run C# script on the server');\n        }\n        const JsonData = await response.text(); // Get the raw text response\n\n        const jsonData = JSON.parse(JsonData); // Parse the cleaned JSON string\n\n        let dataArray = JSON.parse(jsonData.data);\n\n        // Заполняем пропуски в свойстве \"date\"\n        for (let i = 0; i < dataArray.length; i++) {\n          if (dataArray[i].date === null || dataArray[i].date === \"\") {\n            dataArray[i].date = dataArray[i - 1].date;\n          }\n        }\n\n        // Удаляем элементы, у которых все свойства (кроме \"date\") пусты\n        dataArray = dataArray.filter(item => {\n          if (item.subst_person === \"\" || item.subst_person === \"nav stundas\") return false; // Все свойства (кроме \"date\") пусты, удаляем элемент\n          return true;\n        });\n        const filteredData = filterDataByCurrentDate(dataArray, currentDate);\n        console.log('C# script executed successfully. Data from the server:', filteredData);\n        setSpreadsheetData(filteredData);\n      } catch (error) {\n        console.error('Error running C# script:', error);\n      }\n    };\n\n    // Вызываем функцию для отправки POST-запроса\n    runCSharpScript();\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData, currentDate]);\n  const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n  const fetchTxtContent = async fileName => {\n    try {\n      const txtFileRequest = await fetch(url + \"getImage/\" + fileName);\n      if (txtFileRequest.ok) {\n        return await txtFileRequest.text();\n      } else {\n        console.error('Error fetching .txt file:', txtFileRequest.status);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching .txt file:', error);\n      return null;\n    }\n  };\n  const renderPageNumbers = async () => {\n    const pageNumbers = [];\n    let totalElements = sourceList.length;\n    const fetchTxtContentPromises = sourceList.map(fileName => async () => {\n      if (fileName.endsWith('.txt')) {\n        const txtContent = await fetchTxtContent(fileName);\n        if (txtContent) {\n          const linesCount = txtContent.split('\\n').length;\n          totalElements += linesCount - 1;\n        }\n      }\n    });\n    await Promise.all(fetchTxtContentPromises.map(func => func()));\n    for (let i = 1; i <= totalPages + totalElements; i++) {\n      if (sourceList[i - totalPages - 1] !== \"logo.png\") {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n          onClick: () => paginate(i),\n          isActive: i === currentPage\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return pageNumbers;\n  };\n  const renderPageNumbersAsync = async () => {\n    const pageNumbers = await renderPageNumbers();\n    setRenderedButtons(pageNumbers); // Оборачиваем массив элементов в фрагмент для корректного отображения\n  };\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n    if (pageNumber > totalPages) console.log(`Clicked on photo page ${pageNumber}`);\n  };\n  const filterDataByCurrentDate = (data, currentDate) => {\n    return data.filter(item => {\n      const itemDate = item.date;\n      return itemDate === currentDate;\n    });\n  };\n  const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderedContent, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paginationContainer\",\n      children: renderedButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"NKsrcDklTsDTG8UXOmrLY8x2ceo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Linkify","ReactPlayer","DataTable","jsxDEV","_jsxDEV","App","_s","sourceList","setSourceList","currentTime","setCurrentTime","getFormattedTime","currentDateLV","setCurrentDateLV","getFormattedLatvianDate","currentDate","setCurrentDate","getFormattedDate","currentPage","setCurrentPage","spreadsheetData","setSpreadsheetData","itemsPerPage","url","renderedContent","setRenderedContent","renderedButtons","setRenderedButtons","renderAsyncContent","length","content","renderContent","totalPages","sourceIndex","source","request","extension","split","response","fetch","console","log","status","ok","blobData","blob","imageUrl","URL","createObjectURL","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","error","autoPlay","loop","children","type","txtFileRequest","txtContent","text","linkedContent","map","line","index","isYouTubeLink","includes","isImageLink","match","width","height","playing","muted","sortedFilteredData","slice","data","renderPageNumbersAsync","fetchPhotoList","Error","photoList","json","PageButton","onClick","isActive","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedHours","String","padStart","formattedMinutes","formattedSeconds","date","day","getDate","month","getMonth","year","getFullYear","daysOfWeek","months","dayOfWeek","getDay","dayOfMonth","updateCurrentTime","updateCurrentDate","updateCurrentDateLV","intervalId","setInterval","clearInterval","romanToNumber","roman","romanNumeralMap","I","II","III","sortData","columns","sortedData","sort","a","b","i","column","valueA","valueB","regex","matchA","matchB","numComparison","parseInt","romanComparison","localeCompare","sensitivity","comparison","runCSharpScript","method","headers","JsonData","jsonData","JSON","parse","dataArray","filter","item","subst_person","filteredData","filterDataByCurrentDate","Math","ceil","fetchTxtContent","renderPageNumbers","pageNumbers","totalElements","fetchTxtContentPromises","endsWith","linesCount","Promise","all","func","push","paginate","pageNumber","itemDate","_c","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Linkify from 'react-linkify';\nimport ReactPlayer from 'react-player';\nimport DataTable from './Data_table';\nimport './styles.css';\nimport './App.css';\n\nfunction App() {\n    const [sourceList, setSourceList] = useState([]);\n    const [currentTime, setCurrentTime] = useState(getFormattedTime());\n    const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n    const [currentDate, setCurrentDate] = useState(getFormattedDate());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [spreadsheetData, setSpreadsheetData] = useState([]);\n    const [itemsPerPage] = useState(20);\n    const url = 'http://localhost:3001/';\n    const [renderedContent, setRenderedContent] = useState(null);\n    const [renderedButtons, setRenderedButtons] = useState(null);\n\n    const renderAsyncContent = async () => {\n        if (sourceList.length === 0) {\n            return null; // Переосмыслите, что возвращать в этом случае, например, заглушку или загрузочный индикатор\n        }\n\n        const content = await renderContent();\n        setRenderedContent(content);\n    };\n\n\n    const renderContent = async () => {\n        if (currentPage > totalPages) {\n            const sourceIndex = currentPage - totalPages - 1;\n            const source = sourceList[sourceIndex];\n            const request = url + \"getImage/\" + source;\n            let extension = \"\";\n            if (source)\n                extension = source.split(\".\")[1];\n            else\n                return (null);\n\n            if (sourceIndex >= 0 && sourceIndex < sourceList.length && extension !== \"txt\") {\n                if (extension !== \"mp4\") {\n                    try {\n                        const response = await fetch(request);\n                        console.log('HTTP status:', response.status);\n\n                        if (response.ok) {\n                            const blobData = await response.blob();\n                            const imageUrl = URL.createObjectURL(blobData);\n\n                            return (\n                                <img\n                                    src={imageUrl}\n                                    alt={`Sheet ${currentPage}`}\n                                    className=\"photoImage\"\n                                />\n                            );\n                        }\n                        else {\n                            // обработка ошибок\n                            console.error('Error fetching image:', response.status);\n                            return null;\n                        }\n                    } catch (error) {\n                        console.error('Error fetching image:', error);\n                        return null;\n                    }\n                } else {\n                    return (\n                        <video className=\"videoPlayer\" autoPlay loop>\n                            <source src={`${request}`} type=\"video/mp4\" />\n                            <source src={`${request}`} type=\"video/ogg\" />\n                            Your browser does not support the video tag.\n                        </video>\n                    );\n                }\n            } else {\n                const txtFileRequest = await fetch(url + \"getImage/\" + source);\n\n                if (txtFileRequest.ok) {\n                    const txtContent = await txtFileRequest.text();\n                    const linkedContent = txtContent.split('\\n');\n\n                    return (\n                        <div>\n                            {linkedContent.map((line, index) => {\n                                const isYouTubeLink = line.includes('youtu.be');\n                                const isImageLink = line.match(/\\.(jpeg|jpg|gif|png)$/);\n\n                                return (\n                                    <div key={index}>\n                                        <Linkify>{line}</Linkify>\n                                        {isYouTubeLink && (\n                                            <ReactPlayer\n                                                url={line}\n                                                width=\"300px\"\n                                                height=\"200px\"\n                                                playing\n                                                muted\n                                            />\n                                        )}\n                                        {isImageLink && (\n                                            <img src={line} alt={`Image ${index}`} key={`img-${index}`} />\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    );\n\n                } else {\n                    // Обработка ошибки получения файла .txt\n                    console.error('Error fetching .txt file:', txtFileRequest.status);\n                    return <div>Error fetching .txt file</div>;\n                }\n            }\n        } else {\n            // код для отображения таблицы данных\n            return (\n                <div>\n                    <h1>{currentTime}</h1>\n                    <h2>AIZVIETOŠANAS LAPA</h2>\n                    <h3>{currentDateLV}</h3>\n                    <div className=\"table-wrapper\">\n                        <table className=\"fl-table\">\n                            <thead>\n                                <tr>\n                                    <th>Aizvietotājs</th>\n                                    <th>Stunda</th>\n                                    <th>Klase</th>\n                                    <th>Kab.</th>\n                                    <th>Promešosais skolotājs</th>\n                                    <th>Piezīmes</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"dataBody\">\n                                {sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => (\n                                    <DataTable\n                                        key={index}\n                                        data={data}\n                                        currentDate={currentDate}\n                                    />\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (sourceList.length > 0) {\n            renderAsyncContent();\n            renderPageNumbersAsync();\n        }\n    }, [currentPage, sourceList]);\n\n\n    useEffect(() => {\n        const fetchPhotoList = async () => {\n            try {\n                const response = await fetch(url + 'getPhotoList');\n                if (!response.ok) {\n                    console.error('Failed to fetch photo list. HTTP status:', response.status);\n                    throw new Error('Failed to fetch photo list');\n                }\n                const { photoList } = await response.json();\n                setSourceList(photoList);\n                renderAsyncContent(); // Вызываем renderAsyncContent после установки sourceList\n                renderPageNumbersAsync(); // Вызываем renderPageNumbersAsync после установки sourceList\n                setCurrentPage(1);\n            } catch (error) {\n                console.error('Error fetching photo list:', error);\n            }\n        };\n\n        // Запускаем функцию для получения списка фото\n        fetchPhotoList();\n    }, []);\n\n\n\n    const PageButton = ({ onClick, isActive }) => (\n        <button onClick={onClick} className={`button-81 ${isActive ? 'active' : ''}`}>\n        </button>\n    );\n\n    function getFormattedTime() {\n        const currentDate = new Date();\n        const hours = currentDate.getHours();\n        const minutes = currentDate.getMinutes();\n        const seconds = currentDate.getSeconds();\n        const formattedHours = String(hours).padStart(2, '0');\n        const formattedMinutes = String(minutes).padStart(2, '0');\n        const formattedSeconds = String(seconds).padStart(2, '0');\n        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    }\n\n    function getFormattedDate(date) {\n        if (!date) {\n            date = new Date();\n        }\n\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n\n        return `${day}.${month}.${year}.`;\n    }\n\n    function getFormattedLatvianDate() {\n        const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n        const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n\n        const currentDate = new Date();\n        const dayOfWeek = daysOfWeek[currentDate.getDay()];\n        const dayOfMonth = currentDate.getDate();\n        const month = months[currentDate.getMonth()];\n\n        return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n    }\n\n    const updateCurrentTime = useCallback(() => {\n        setCurrentTime(getFormattedTime());\n    }, []);\n\n    const updateCurrentDate = useCallback(() => {\n        setCurrentDate(getFormattedDate());\n    }, []);\n\n    const updateCurrentDateLV = useCallback(() => {\n        setCurrentDateLV(getFormattedLatvianDate());\n    }, []);\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n\n    const romanToNumber = (roman) => {\n        const romanNumeralMap = {\n            I: 1,\n            II: 2,\n            III: 3\n        };\n\n        return romanNumeralMap[roman] || 0;\n    };\n\n    const sortData = (data, columns) => {\n        const sortedData = [...data];\n\n        sortedData.sort((a, b) => {\n            for (let i = 0; i < columns.length; i++) {\n                const column = columns[i];\n                const valueA = a[column] || '';\n                const valueB = b[column] || '';\n\n                if (column === 'class') {\n                    const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n                    const matchA = valueA.match(regex);\n                    const matchB = valueB.match(regex);\n\n                    if (matchA && matchB) {\n                        const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n\n                        if (numComparison !== 0) {\n                            return numComparison;\n                        }\n\n                        const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n\n                        if (romanComparison !== 0) {\n                            return romanComparison;\n                        }\n\n                        return matchA[2].localeCompare(matchB[2], 'en', { sensitivity: 'base' });\n                    } else {\n                        return 0;\n                    }\n                } else {\n                    const comparison = valueA.localeCompare(valueB, 'en', { sensitivity: 'base' });\n\n                    if (comparison !== 0) {\n                        return comparison;\n                    }\n                }\n            }\n            return 0;\n        });\n\n        return sortedData;\n    };\n\n\n\n    useEffect(() => {\n        const runCSharpScript = async () => {\n            try {\n                console.log('Sending a POST request to run C# script...');\n\n                const response = await fetch(url + 'runCSharpScript', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n                console.log('Server response received:', response);\n\n                if (!response.ok) {\n                    console.error('Failed to run C# script on the server. HTTP status:', response.status);\n                    throw new Error('Failed to run C# script on the server');\n                }\n\n                const JsonData = await response.text(); // Get the raw text response\n\n                const jsonData = JSON.parse(JsonData); // Parse the cleaned JSON string\n\n                let dataArray = JSON.parse(jsonData.data);\n\n                // Заполняем пропуски в свойстве \"date\"\n                for (let i = 0; i < dataArray.length; i++) {\n                    if (dataArray[i].date === null || dataArray[i].date === \"\") {\n                        dataArray[i].date = dataArray[i - 1].date;\n                    }\n                }\n\n                // Удаляем элементы, у которых все свойства (кроме \"date\") пусты\n                dataArray = dataArray.filter(item => {\n                    if (item.subst_person === \"\" || item.subst_person === \"nav stundas\")\n                        return false; // Все свойства (кроме \"date\") пусты, удаляем элемент\n                    return true;\n                });\n\n                const filteredData = filterDataByCurrentDate(dataArray, currentDate);\n\n                console.log('C# script executed successfully. Data from the server:', filteredData);\n                setSpreadsheetData(filteredData);\n            } catch (error) {\n                console.error('Error running C# script:', error);\n            }\n        };\n\n\n        // Вызываем функцию для отправки POST-запроса\n        runCSharpScript();\n\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData, currentDate]);\n\n\n    const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n\n    const fetchTxtContent = async (fileName) => {\n        try {\n            const txtFileRequest = await fetch(url + \"getImage/\" + fileName);\n            if (txtFileRequest.ok) {\n                return await txtFileRequest.text();\n            } else {\n                console.error('Error fetching .txt file:', txtFileRequest.status);\n                return null;\n            }\n        } catch (error) {\n            console.error('Error fetching .txt file:', error);\n            return null;\n        }\n    };\n\n    const renderPageNumbers = async () => {\n        const pageNumbers = [];\n        let totalElements = sourceList.length;\n\n        const fetchTxtContentPromises = sourceList.map((fileName) => async () => {\n            if (fileName.endsWith('.txt')) {\n                const txtContent = await fetchTxtContent(fileName);\n                if (txtContent) {\n                    const linesCount = txtContent.split('\\n').length;\n                    totalElements += linesCount - 1;\n                }\n            }\n        });\n\n        await Promise.all(fetchTxtContentPromises.map((func) => func()));\n\n        for (let i = 1; i <= totalPages + totalElements; i++) {\n            if (sourceList[i - totalPages - 1] !== \"logo.png\") {\n                pageNumbers.push(\n                    <PageButton\n                        key={i}\n                        onClick={() => paginate(i)}\n                        isActive={i === currentPage}\n                    />\n                );\n            }\n        }\n\n        return pageNumbers;\n    };\n\n\n\n    const renderPageNumbersAsync = async () => {\n        const pageNumbers = await renderPageNumbers();\n        setRenderedButtons(pageNumbers); // Оборачиваем массив элементов в фрагмент для корректного отображения\n    };\n\n    const paginate = (pageNumber) => {\n        setCurrentPage(pageNumber);\n        if (pageNumber > totalPages)\n            console.log(`Clicked on photo page ${pageNumber}`);\n    };\n\n    const filterDataByCurrentDate = (data, currentDate) => {\n        return data.filter(item => {\n            const itemDate = item.date;\n            return itemDate === currentDate;\n        });\n    };\n\n    const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n\n    return (\n        <div>\n\n\n            {renderedContent}\n            {/*\n                    <input\n                        type=\"number\"\n                        id=\"itemsPerPage\"\n                        onChange={handleItemsPerPageChange}\n                        placeholder=\"Items per page...\"\n                        min=\"1\"\n                        className=\"itemsPerPageInput\"\n                    />\n                */}\n            <div className=\"paginationContainer\">\n                {renderedButtons}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}