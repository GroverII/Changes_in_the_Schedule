{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport DataTable from './Data_table';\nimport './styles.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTime, setCurrentTime] = useState(getFormattedTime());\n  const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n  const [currentDate, setCurrentDate] = useState(getFormattedDate());\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [maxPageButtons] = useState(5);\n  const PageButton = ({\n    onClick\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    className: \"button-81\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n  const handleItemsPerPageChange = e => {\n    const selectedValue = parseInt(e.target.value, 10);\n    setItemsPerPage(selectedValue);\n    setCurrentPage(1);\n    if (selectedValue > 1000) {\n      alert('Warning: Large number of items per page may cause performance issues.');\n    }\n  };\n  function getFormattedTime() {\n    const currentDate = new Date();\n    const hours = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const seconds = currentDate.getSeconds();\n    return `${hours}:${minutes}:${seconds}`;\n  }\n  function getFormattedDate(date) {\n    if (!date) {\n      date = new Date(); // Если date не передан, используем текущую дату\n    }\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}.`;\n  }\n  function getFormattedLatvianDate() {\n    const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n    const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n    const currentDate = new Date();\n    const dayOfWeek = daysOfWeek[currentDate.getDay()];\n    const dayOfMonth = currentDate.getDate();\n    const month = months[currentDate.getMonth()];\n    return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n  }\n  const updateCurrentTime = useCallback(() => {\n    setCurrentTime(getFormattedTime());\n  }, []);\n  const updateCurrentDate = useCallback(() => {\n    setCurrentDate(getFormattedDate());\n  }, []);\n  const updateCurrentDateLV = useCallback(() => {\n    setCurrentDateLV(getFormattedLatvianDate());\n  }, []);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n  const romanToNumber = roman => {\n    const romanNumeralMap = {\n      I: 1,\n      II: 2,\n      III: 3,\n      IV: 4,\n      V: 5,\n      VI: 6\n      // Добавьте другие римские цифры при необходимости\n    };\n    return romanNumeralMap[roman] || 0;\n  };\n  const sortData = (data, columns) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => {\n      const substPersonComparison = a['subst_person'].toLowerCase() === 'nav stundas' ? 1 : b['subst_person'].toLowerCase() === 'nav stundas' ? -1 : a['subst_person'].localeCompare(b['subst_person'], 'en', {\n        sensitivity: 'base'\n      });\n      if (a['subst_person'] === '' && b['subst_person'] !== '') {\n        return 1; // '' should be at the bottom\n      } else if (a['subst_person'] !== '' && b['subst_person'] === '') {\n        return -1; // '' should be at the bottom\n      }\n      if (substPersonComparison !== 0) {\n        return substPersonComparison;\n      }\n      for (let i = 1; i < columns.length; i++) {\n        const column = columns[i];\n        const valueA = a[column] || '';\n        const valueB = b[column] || '';\n        if (column === 'class') {\n          const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n          const matchA = valueA.match(regex);\n          const matchB = valueB.match(regex);\n          if (matchA && matchB) {\n            const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n            if (numComparison !== 0) {\n              return numComparison;\n            }\n            const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n            if (romanComparison !== 0) {\n              return romanComparison;\n            }\n            return matchA[2].localeCompare(matchB[2], 'en', {\n              sensitivity: 'base'\n            });\n          } else {\n            return 0;\n          }\n        } else {\n          const comparison = valueA.localeCompare(valueB, 'en', {\n            sensitivity: 'base'\n          });\n          if (comparison !== 0) {\n            return comparison;\n          }\n        }\n      }\n      return 0;\n    });\n    return sortedData;\n  };\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  useEffect(() => {\n    const runCSharpScript = async () => {\n      try {\n        console.log('Sending a POST request to run C# script...');\n        const response = await fetch('http://localhost:3001/runCSharpScript', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Server response received:', response);\n        if (!response.ok) {\n          console.error('Failed to run C# script on the server. HTTP status:', response.status);\n          throw new Error('Failed to run C# script on the server');\n        }\n        const JsonData = await response.text(); // Get the raw text response\n\n        const jsonData = JSON.parse(JsonData); // Parse the cleaned JSON string\n\n        let dataArray = JSON.parse(jsonData.data);\n\n        // Заполняем пропуски в свойстве \"date\"\n        for (let i = 0; i < dataArray.length; i++) {\n          if (dataArray[i].date === null || dataArray[i].date === \"\") {\n            dataArray[i].date = dataArray[i - 1].date;\n          }\n        }\n\n        // Удаляем элементы, у которых все свойства (кроме \"date\") пусты\n        dataArray = dataArray.filter(item => {\n          for (const key in item) {\n            if (key !== \"date\" && item[key] !== null && item[key] !== \"\") {\n              return true; // Элемент имеет непустое свойство, оставляем его в массиве\n            }\n          }\n          return false; // Все свойства (кроме \"date\") пусты, удаляем элемент\n        });\n        const filteredData = filterDataByCurrentDate(dataArray, currentDate);\n        console.log('C# script executed successfully. Data from the server:', filteredData);\n        setSpreadsheetData(filteredData);\n      } catch (error) {\n        console.error('Error running C# script:', error);\n      }\n    };\n\n    // Вызываем функцию для отправки POST-запроса\n    runCSharpScript();\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData]);\n  const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n    for (let i = 1; i <= totalPages; i++) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n        onClick: () => paginate(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this));\n    }\n    return pageNumbers;\n  };\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  const filterDataByCurrentDate = (data, currentDate) => {\n    return data.filter(item => {\n      const itemDate = item.date; // предположим, что у вас есть свойство date в каждом объекте\n      return itemDate === currentDate;\n    });\n  };\n  const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"table-wrapper\",\n      children: [currentTime, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), currentDateLV, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), \"AIZVIETO\\u0160ANAS LAPA\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), currentDate, /*#__PURE__*/_jsxDEV(\"table\", {\n        class: \"fl-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Aizvietot\\u0101js\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Stunda\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Klase\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Kab.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Prome\\u0161osais skolot\\u0101js\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Piez\\u012Bmes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          className: \"dataBody\",\n          children: sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => /*#__PURE__*/_jsxDEV(DataTable, {\n            data: data,\n            currentDate: currentDate\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"itemsPerPage\",\n        onChange: handleItemsPerPageChange,\n        placeholder: \"Items per page...\",\n        min: \"1\",\n        className: \"itemsPerPageInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paginationContainer\",\n        children: renderPageNumbers()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Sb0jtJSKLCwcACD3gBAsVJWP3Fc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","DataTable","jsxDEV","_jsxDEV","App","_s","currentTime","setCurrentTime","getFormattedTime","currentDateLV","setCurrentDateLV","getFormattedLatvianDate","currentDate","setCurrentDate","getFormattedDate","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","maxPageButtons","PageButton","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","handleItemsPerPageChange","e","selectedValue","parseInt","target","value","alert","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","daysOfWeek","months","dayOfWeek","getDay","dayOfMonth","updateCurrentTime","updateCurrentDate","updateCurrentDateLV","intervalId","setInterval","clearInterval","romanToNumber","roman","romanNumeralMap","I","II","III","IV","V","VI","sortData","data","columns","sortedData","sort","a","b","substPersonComparison","toLowerCase","localeCompare","sensitivity","i","length","column","valueA","valueB","regex","matchA","match","matchB","numComparison","romanComparison","comparison","spreadsheetData","setSpreadsheetData","runCSharpScript","console","log","response","fetch","method","headers","ok","error","status","Error","JsonData","text","jsonData","JSON","parse","dataArray","filter","item","key","filteredData","filterDataByCurrentDate","totalPages","Math","ceil","renderPageNumbers","pageNumbers","push","paginate","pageNumber","itemDate","sortedFilteredData","children","class","slice","map","index","type","id","onChange","placeholder","min","_c","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport DataTable from './Data_table';\nimport './styles.css';\nimport './App.css';\n\nfunction App() {\n    const [currentTime, setCurrentTime] = useState(getFormattedTime());\n    const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n    const [currentDate, setCurrentDate] = useState(getFormattedDate());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [itemsPerPage, setItemsPerPage] = useState(10);\n    const [maxPageButtons] = useState(5);\n\n\n    const PageButton = ({ onClick }) => (\n        <button onClick={onClick} className=\"button-81\">\n        </button>\n    );\n\n    const handleItemsPerPageChange = (e) => {\n        const selectedValue = parseInt(e.target.value, 10);\n        setItemsPerPage(selectedValue);\n        setCurrentPage(1);\n        if (selectedValue > 1000) {\n            alert('Warning: Large number of items per page may cause performance issues.');\n        }\n    };\n\n    function getFormattedTime() {\n        const currentDate = new Date();\n        const hours = currentDate.getHours();\n        const minutes = currentDate.getMinutes();\n        const seconds = currentDate.getSeconds();\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n    function getFormattedDate(date) {\n        if (!date) {\n            date = new Date();  // Если date не передан, используем текущую дату\n        }\n\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n\n        return `${day}.${month}.${year}.`;\n    }\n\n    function getFormattedLatvianDate() {\n        const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n        const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n\n        const currentDate = new Date();\n        const dayOfWeek = daysOfWeek[currentDate.getDay()];\n        const dayOfMonth = currentDate.getDate();\n        const month = months[currentDate.getMonth()];\n\n        return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n    }\n\n    const updateCurrentTime = useCallback(() => {\n        setCurrentTime(getFormattedTime());\n    }, []);\n\n    const updateCurrentDate = useCallback(() => {\n        setCurrentDate(getFormattedDate());\n    }, []);\n\n    const updateCurrentDateLV = useCallback(() => {\n        setCurrentDateLV(getFormattedLatvianDate());\n    }, []);\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n\n    const romanToNumber = (roman) => {\n        const romanNumeralMap = {\n            I: 1,\n            II: 2,\n            III: 3,\n            IV: 4,\n            V: 5,\n            VI: 6\n            // Добавьте другие римские цифры при необходимости\n        };\n\n        return romanNumeralMap[roman] || 0;\n    };\n\n    const sortData = (data, columns) => {\n        const sortedData = [...data];\n\n        sortedData.sort((a, b) => {\n\n            const substPersonComparison = a['subst_person'].toLowerCase() === 'nav stundas'\n                ? 1\n                : b['subst_person'].toLowerCase() === 'nav stundas'\n                    ? -1\n                    : a['subst_person'].localeCompare(b['subst_person'], 'en', { sensitivity: 'base' });\n\n            if (a['subst_person'] === '' && b['subst_person'] !== '') {\n                return 1; // '' should be at the bottom\n            } else if (a['subst_person'] !== '' && b['subst_person'] === '') {\n                return -1; // '' should be at the bottom\n            }\n\n            if (substPersonComparison !== 0) {\n                return substPersonComparison;\n            }\n\n            for (let i = 1; i < columns.length; i++) {\n                const column = columns[i];\n                const valueA = a[column] || '';\n                const valueB = b[column] || '';\n\n                if (column === 'class') {\n                    const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n                    const matchA = valueA.match(regex);\n                    const matchB = valueB.match(regex);\n\n                    if (matchA && matchB) {\n                        const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n\n                        if (numComparison !== 0) {\n                            return numComparison;\n                        }\n\n                        const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n\n                        if (romanComparison !== 0) {\n                            return romanComparison;\n                        }\n\n                        return matchA[2].localeCompare(matchB[2], 'en', { sensitivity: 'base' });\n                    } else {\n                        return 0;\n                    }\n                } else {\n                    const comparison = valueA.localeCompare(valueB, 'en', { sensitivity: 'base' });\n\n                    if (comparison !== 0) {\n                        return comparison;\n                    }\n                }\n            }\n            return 0;\n        });\n\n        return sortedData;\n    };\n\n\n\n\n    const [spreadsheetData, setSpreadsheetData] = useState([]);\n\n    useEffect(() => {\n        const runCSharpScript = async () => {\n            try {\n                console.log('Sending a POST request to run C# script...');\n\n                const response = await fetch('http://localhost:3001/runCSharpScript', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n                console.log('Server response received:', response);\n\n                if (!response.ok) {\n                    console.error('Failed to run C# script on the server. HTTP status:', response.status);\n                    throw new Error('Failed to run C# script on the server');\n                }\n\n                const JsonData = await response.text(); // Get the raw text response\n\n                const jsonData = JSON.parse(JsonData); // Parse the cleaned JSON string\n\n                let dataArray = JSON.parse(jsonData.data);\n\n                // Заполняем пропуски в свойстве \"date\"\n                for (let i = 0; i < dataArray.length; i++) {\n                    if (dataArray[i].date === null || dataArray[i].date === \"\") {\n                        dataArray[i].date = dataArray[i - 1].date;\n                    }\n                }\n\n                // Удаляем элементы, у которых все свойства (кроме \"date\") пусты\n                dataArray = dataArray.filter(item => {\n                    for (const key in item) {\n                        if (key !== \"date\" && item[key] !== null && item[key] !== \"\") {\n                            return true; // Элемент имеет непустое свойство, оставляем его в массиве\n                        }\n                    }\n                    return false; // Все свойства (кроме \"date\") пусты, удаляем элемент\n                });\n\n                const filteredData = filterDataByCurrentDate(dataArray, currentDate);\n\n                console.log('C# script executed successfully. Data from the server:', filteredData);\n                setSpreadsheetData(filteredData);\n            } catch (error) {\n                console.error('Error running C# script:', error);\n            }\n        };\n\n\n        // Вызываем функцию для отправки POST-запроса\n        runCSharpScript();\n\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData]);\n\n\n    const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n\n    const renderPageNumbers = () => {\n        const pageNumbers = [];\n\n        for (let i = 1; i <= totalPages; i++) {\n            pageNumbers.push(\n                <PageButton\n                    key={i}\n                    onClick={() => paginate(i)}\n                />\n            );\n        }\n\n        return pageNumbers;\n    };\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    const filterDataByCurrentDate = (data, currentDate) => {\n        return data.filter(item => {\n            const itemDate = item.date; // предположим, что у вас есть свойство date в каждом объекте\n            return itemDate === currentDate;\n        });\n    };\n\n    const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n\n    return (\n        <div>\n            <div class=\"table-wrapper\">\n                {currentTime}\n                <br />\n                {currentDateLV}\n                <br />\n                AIZVIETOŠANAS LAPA\n                <br />\n                {currentDate}\n                <table class=\"fl-table\">\n                    <thead>\n                        <tr>\n                            <th>Aizvietotājs</th>\n                            <th>Stunda</th>\n                            <th>Klase</th>\n                            <th>Kab.</th>\n                            <th>Promešosais skolotājs</th>\n                            <th>Piezīmes</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"dataBody\">\n                        {sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => (\n                            <DataTable\n                                key={index}\n                                data={data}\n                                currentDate={currentDate}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n                <input\n                    type=\"number\"\n                    id=\"itemsPerPage\"\n                    onChange={handleItemsPerPageChange}\n                    placeholder=\"Items per page...\"\n                    min=\"1\"\n                    className=\"itemsPerPageInput\"\n                />\n\n                <div className=\"paginationContainer\">\n                    {renderPageNumbers()}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}