{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\components\\\\multiple-list-dnd.component.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}`,\n  content: `item ${k + offset}`\n}));\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\n// Move item from one list to other\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\nconst grid = 10;\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  background: isDragging ? 'lightgreen' : 'grey',\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\nclass MultipleDragList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    // Defining unique ID for multiple lists\n    this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n    this.getList = id => this.state[this.id2List[id]];\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n\n      // Sorting in same list\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n        this.setState(state);\n      }\n      // Interlist movement\n      else {\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n        this.setState({\n          items: result.droppable,\n          selected: result.droppable2\n        });\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'display': 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            style: getListStyle(snapshot.isDraggingOver),\n            children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id,\n              index: index,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 45\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable2\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            style: getListStyle(snapshot.isDraggingOver),\n            children: [this.state.selected.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id,\n              index: index,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 45\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default MultipleDragList;","map":{"version":3,"names":["React","Component","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","MultipleDragList","constructor","args","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","render","style","children","provided","snapshot","ref","innerRef","item","draggableId","draggableProps","dragHandleProps","fileName","_jsxFileName","lineNumber","columnNumber","placeholder"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/components/multiple-list-dnd.component.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n// Move item from one list to other\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 10;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nclass MultipleDragList extends Component {\r\n    state = {\r\n        items: getItems(10),\r\n        selected: getItems(5, 10)\r\n    };\r\n\r\n    // Defining unique ID for multiple lists\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        // Sorting in same list\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        }\r\n        // Interlist movement\r\n        else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ 'display': 'flex' }}>\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    <Droppable droppableId=\"droppable\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {this.state.items.map((item, index) => (\r\n                                    <Draggable\r\n                                        key={item.id}\r\n                                        draggableId={item.id}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                {item.content}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    <Droppable droppableId=\"droppable2\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {this.state.selected.map((item, index) => (\r\n                                    <Draggable\r\n                                        key={item.id}\r\n                                        draggableId={item.id}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                {item.content}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MultipleDragList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}