{"ast":null,"code":"// adminToServer.js\n\nimport axios from 'axios';\nconst url = 'http://localhost:3001/'; // �������� �� ��� URL �������, ���� �����\n\nexport const updateConfig = async updates => {\n  try {\n    const response = await fetch(url + 'updateConfig', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating config:', error);\n    throw error;\n  }\n};\nexport const getAllFiles = async () => {\n  try {\n    const response = await fetch(url + 'getAllFiles');\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting folders:', error);\n    throw error;\n  }\n};\nexport const addSourceFile = async fileName => {\n  try {\n    const response = await fetch(url + 'addSourceFile', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding folder:', error);\n    throw error;\n  }\n};\nexport const deleteSourceFile = async fileName => {\n  try {\n    const response = await fetch(url + `deleteSourceFile/${fileName}`, {\n      method: 'DELETE'\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error deleting folder:', error);\n    throw error;\n  }\n};\nexport const deleteSource = async (selectedFolder, type, fileName) => {\n  try {\n    const response = await fetch(url + `deleteSource/${selectedFolder}/${type}/${fileName}`, {\n      method: 'DELETE'\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting file:', error);\n    throw error;\n  }\n};\nexport const getSourcesList = async fileName => {\n  try {\n    const response = await fetch(url + `getSourcesList/${fileName}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting sources list:', error);\n    throw error;\n  }\n};\nexport const logIn = async (login, password, token) => {\n  try {\n    const response = await fetch(url + 'login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login: login,\n        password: password,\n        recaptchaToken: token\n      })\n    });\n    console.log(response);\n    if (response.ok) {\n      const data = await response.json();\n      return {\n        isLoggedIn: true,\n        data\n      };\n    } else {\n      const errorText = await response.text(); // �������� ����� ������\n      return {\n        isLoggedIn: false,\n        error: errorText\n      }; // ���������� ������ ����� ������\n    }\n  } catch (error) {\n    return {\n      isLoggedIn: false,\n      error: error.message\n    }; // ���������� ������ ����� ������\n  }\n};\nexport const changeLogin = async (oldLogin, newLogin, password) => {\n  try {\n    const response = await fetch(url + 'changelogin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        oldLogin,\n        newLogin,\n        password\n      })\n    });\n    if (response.ok) {\n      return {\n        success: true\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Failed to update login'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: 'Network error. Failed to update login'\n    };\n  }\n};\nexport const runCSharpScript = async () => {\n  try {\n    const response = await fetch(url + 'runCSharpScript', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to run C# script on the server. HTTP status: ${response.status}`);\n    }\n    const jsonData = await response.json();\n    if (!jsonData.data.trim()) {\n      console.error('Empty response data received from the server.');\n      return;\n    }\n    let dataArray;\n    try {\n      dataArray = JSON.parse(jsonData.data);\n    } catch (parseError) {\n      throw new Error(`Error parsing JSON data: ${parseError}`);\n    }\n    if (!Array.isArray(dataArray)) {\n      throw new Error(`Data is not an array: ${dataArray}`);\n    }\n    return dataArray;\n  } catch (error) {\n    throw new Error(`Error during C# script execution: ${error}`);\n  }\n};","map":{"version":3,"names":["axios","url","updateConfig","updates","response","fetch","method","headers","body","JSON","stringify","json","error","console","getAllFiles","addSourceFile","fileName","deleteSourceFile","deleteSource","selectedFolder","type","ok","getSourcesList","logIn","login","password","token","recaptchaToken","log","data","isLoggedIn","errorText","text","message","changeLogin","oldLogin","newLogin","success","runCSharpScript","Error","status","jsonData","trim","dataArray","parse","parseError","Array","isArray"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/adminToServer.js"],"sourcesContent":["// adminToServer.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst url = 'http://localhost:3001/'; // �������� �� ��� URL �������, ���� �����\r\n\r\nexport const updateConfig = async (updates) => {\r\n    try {\r\n        const response = await fetch(url + 'updateConfig', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(updates)\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error updating config:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getAllFiles = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getAllFiles');\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error getting folders:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const addSourceFile = async (fileName) => {\r\n    try {\r\n        const response = await fetch(url + 'addSourceFile', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ fileName }),\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error adding folder:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteSourceFile = async (fileName) => {\r\n    try {\r\n        const response = await fetch(url + `deleteSourceFile/${fileName}`, {\r\n            method: 'DELETE',\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error deleting folder:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteSource = async (selectedFolder, type, fileName) => {\r\n    try {\r\n        const response = await fetch(url + `deleteSource/${selectedFolder}/${type}/${fileName}`, {\r\n            method: 'DELETE',\r\n        });\r\n        return response.ok;\r\n    } catch (error) {\r\n        console.error('Error deleting file:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getSourcesList = async (fileName) => {\r\n    try {\r\n        const response = await fetch(url + `getSourcesList/${fileName}`);\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error getting sources list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const logIn = async (login, password, token) => {\r\n    try {\r\n        const response = await fetch(url + 'login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                login: login,\r\n                password: password,\r\n                recaptchaToken: token\r\n            }),\r\n        });\r\n        console.log(response);\r\n\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            return { isLoggedIn: true, data };\r\n        } else {\r\n            const errorText = await response.text(); // �������� ����� ������\r\n            return { isLoggedIn: false, error: errorText }; // ���������� ������ ����� ������\r\n        }\r\n    } catch (error) {\r\n        return { isLoggedIn: false, error: error.message }; // ���������� ������ ����� ������\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const changeLogin = async (oldLogin, newLogin, password) => {\r\n    try {\r\n        const response = await fetch(url + 'changelogin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ oldLogin, newLogin, password }),\r\n        });\r\n\r\n        if (response.ok) {\r\n            return { success: true };\r\n        } else {\r\n            return { success: false, error: 'Failed to update login' };\r\n        }\r\n    } catch (error) {\r\n        return { success: false, error: 'Network error. Failed to update login' };\r\n    }\r\n};\r\n\r\nexport const runCSharpScript = async () => {\r\n    try {\r\n        const response = await fetch(url + 'runCSharpScript', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to run C# script on the server. HTTP status: ${response.status}`);\r\n        }\r\n\r\n        const jsonData = await response.json();\r\n\r\n        if (!jsonData.data.trim()) {\r\n            console.error('Empty response data received from the server.');\r\n            return;\r\n        }\r\n\r\n        let dataArray;\r\n\r\n        try {\r\n            dataArray = JSON.parse(jsonData.data);\r\n        } catch (parseError) {\r\n            throw new Error(`Error parsing JSON data: ${parseError}`);\r\n        }\r\n\r\n        if (!Array.isArray(dataArray)) {\r\n            throw new Error(`Data is not an array: ${dataArray}`);\r\n        }\r\n\r\n        return dataArray;\r\n    } catch (error) {\r\n        throw new Error(`Error during C# script execution: ${error}`);\r\n    }\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAG,wBAAwB,CAAC,CAAC;;AAEtC,OAAO,MAAMC,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC3C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,cAAc,EAAE;MAC/CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;IAChC,CAAC,CAAC;IACF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,aAAa,CAAC;IACjD,OAAO,MAAMG,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,eAAe,EAAE;MAChDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEM;MAAS,CAAC;IACrC,CAAC,CAAC;IACF,OAAO,MAAMZ,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAG,MAAOD,QAAQ,IAAK;EAChD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAI,oBAAmBe,QAAS,EAAC,EAAE;MAC/DV,MAAM,EAAE;IACZ,CAAC,CAAC;IACF,OAAO,MAAMF,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAOC,cAAc,EAAEC,IAAI,EAAEJ,QAAQ,KAAK;EAClE,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAI,gBAAekB,cAAe,IAAGC,IAAK,IAAGJ,QAAS,EAAC,EAAE;MACrFV,MAAM,EAAE;IACZ,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACiB,EAAE;EACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMU,cAAc,GAAG,MAAON,QAAQ,IAAK;EAC9C,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAI,kBAAiBe,QAAS,EAAC,CAAC;IAChE,OAAO,MAAMZ,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMW,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,KAAK;EACnD,IAAI;IACA,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,OAAO,EAAE;MACxCK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBc,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA,QAAQ;QAClBE,cAAc,EAAED;MACpB,CAAC;IACL,CAAC,CAAC;IACFb,OAAO,CAACe,GAAG,CAACxB,QAAQ,CAAC;IAErB,IAAIA,QAAQ,CAACiB,EAAE,EAAE;MACb,MAAMQ,IAAI,GAAG,MAAMzB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAO;QAAEmB,UAAU,EAAE,IAAI;QAAED;MAAK,CAAC;IACrC,CAAC,MAAM;MACH,MAAME,SAAS,GAAG,MAAM3B,QAAQ,CAAC4B,IAAI,CAAC,CAAC,CAAC,CAAC;MACzC,OAAO;QAAEF,UAAU,EAAE,KAAK;QAAElB,KAAK,EAAEmB;MAAU,CAAC,CAAC,CAAC;IACpD;EACJ,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACZ,OAAO;MAAEkB,UAAU,EAAE,KAAK;MAAElB,KAAK,EAAEA,KAAK,CAACqB;IAAQ,CAAC,CAAC,CAAC;EACxD;AACJ,CAAC;AAID,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEX,QAAQ,KAAK;EAC/D,IAAI;IACA,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,aAAa,EAAE;MAC9CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEyB,QAAQ;QAAEC,QAAQ;QAAEX;MAAS,CAAC;IACzD,CAAC,CAAC;IAEF,IAAIrB,QAAQ,CAACiB,EAAE,EAAE;MACb,OAAO;QAAEgB,OAAO,EAAE;MAAK,CAAC;IAC5B,CAAC,MAAM;MACH,OAAO;QAAEA,OAAO,EAAE,KAAK;QAAEzB,KAAK,EAAE;MAAyB,CAAC;IAC9D;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZ,OAAO;MAAEyB,OAAO,EAAE,KAAK;MAAEzB,KAAK,EAAE;IAAwC,CAAC;EAC7E;AACJ,CAAC;AAED,OAAO,MAAM0B,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMlC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,iBAAiB,EAAE;MAClDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACiB,EAAE,EAAE;MACd,MAAM,IAAIkB,KAAK,CAAE,uDAAsDnC,QAAQ,CAACoC,MAAO,EAAC,CAAC;IAC7F;IAEA,MAAMC,QAAQ,GAAG,MAAMrC,QAAQ,CAACO,IAAI,CAAC,CAAC;IAEtC,IAAI,CAAC8B,QAAQ,CAACZ,IAAI,CAACa,IAAI,CAAC,CAAC,EAAE;MACvB7B,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;MAC9D;IACJ;IAEA,IAAI+B,SAAS;IAEb,IAAI;MACAA,SAAS,GAAGlC,IAAI,CAACmC,KAAK,CAACH,QAAQ,CAACZ,IAAI,CAAC;IACzC,CAAC,CAAC,OAAOgB,UAAU,EAAE;MACjB,MAAM,IAAIN,KAAK,CAAE,4BAA2BM,UAAW,EAAC,CAAC;IAC7D;IAEA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,SAAS,CAAC,EAAE;MAC3B,MAAM,IAAIJ,KAAK,CAAE,yBAAwBI,SAAU,EAAC,CAAC;IACzD;IAEA,OAAOA,SAAS;EACpB,CAAC,CAAC,OAAO/B,KAAK,EAAE;IACZ,MAAM,IAAI2B,KAAK,CAAE,qCAAoC3B,KAAM,EAAC,CAAC;EACjE;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}