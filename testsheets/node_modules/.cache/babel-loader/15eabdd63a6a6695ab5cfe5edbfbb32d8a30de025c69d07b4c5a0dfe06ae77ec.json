{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DataTable from './Data_table';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTime, setCurrentTime] = useState(getFormattedTime());\n  const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n  const [currentDate, setCurrentDate] = useState(getFormattedDate());\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [maxPageButtons] = useState(5);\n  const PageButton = ({\n    label,\n    onClick,\n    buttonType\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    className: `page-button ${buttonType}`,\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n  const handleItemsPerPageChange = e => {\n    const selectedValue = parseInt(e.target.value, 10);\n    setItemsPerPage(selectedValue);\n    setCurrentPage(1);\n    if (selectedValue > 1000) {\n      alert('Warning: Large number of items per page may cause performance issues.');\n    }\n  };\n  function getFormattedTime() {\n    const currentDate = new Date();\n    const hours = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const seconds = currentDate.getSeconds();\n    return `${hours}:${minutes}:${seconds}`;\n  }\n  function getFormattedDate(date) {\n    if (!date) {\n      date = new Date(); // Если date не передан, используем текущую дату\n    }\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}`;\n  }\n  function getFormattedLatvianDate() {\n    const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n    const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n    const currentDate = new Date();\n    const dayOfWeek = daysOfWeek[currentDate.getDay()];\n    const dayOfMonth = currentDate.getDate();\n    const month = months[currentDate.getMonth()];\n    return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n  }\n  function updateCurrentTime() {\n    setCurrentTime(getFormattedTime());\n  }\n  function updateCurrentDate() {\n    setCurrentDate(getFormattedDate()); // Без передачи аргумента\n  }\n  function updateCurrentDateLV() {\n    setCurrentDateLV(getFormattedLatvianDate());\n  }\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n  const romanToNumber = roman => {\n    const romanNumeralMap = {\n      I: 1,\n      II: 2,\n      III: 3,\n      IV: 4,\n      V: 5,\n      VI: 6\n      // Добавьте другие римские цифры при необходимости\n    };\n    return romanNumeralMap[roman] || 0;\n  };\n  const sortData = (data, columns) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => {\n      for (let i = 0; i < columns.length; i++) {\n        const column = columns[i];\n        const valueA = a[column] || '';\n        const valueB = b[column] || '';\n        if (column === 'class') {\n          // Разделить значение столбца 'class' на числовую и буквенную части\n          const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n          const matchA = valueA.match(regex);\n          const matchB = valueB.match(regex);\n          if (matchA && matchB) {\n            // Сравнить числовые части\n            const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n            if (numComparison !== 0) {\n              // Если числовые части не равны, вернуть результат\n              return numComparison;\n            }\n\n            // Если числовые части равны, сравнить римские цифры\n            const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n            if (romanComparison !== 0) {\n              return romanComparison;\n            }\n\n            // Сравнить буквенные части без учета регистра и диакритических знаков\n            return matchA[2].localeCompare(matchB[2], 'en', {\n              sensitivity: 'base'\n            });\n          } else {\n            // Если не удалось разделить на числовую и буквенную части, вернуть 0\n            return 0;\n          }\n        } else {\n          // Логика фильтрации для других столбцов\n          const comparison = valueA.localeCompare(valueB);\n          if (comparison !== 0) {\n            return comparison;\n          }\n        }\n      }\n      return 0;\n    });\n    return sortedData;\n  };\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  useEffect(() => {\n    const runCSharpScript = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/runCSharpScript', {\n          method: 'POST',\n          // Указываем метод POST\n          headers: {\n            'Content-Type': 'application/json' // Устанавливаем тип содержимого\n          }\n          // Можно добавить тело запроса, если необходимо передавать данные\n          // body: JSON.stringify({ key: 'value' }),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to run C# script on the server');\n        }\n        const jsonData = await response.json();\n        console.log('C# script executed successfully. Data from the server:', jsonData.data);\n      } catch (error) {\n        console.error('Error running C# script:', error);\n      }\n    };\n\n    // Вызываем функцию для отправки POST-запроса\n    runCSharpScript();\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData]);\n  const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n    const halfButtons = Math.floor(maxPageButtons / 2);\n    let startPage = currentPage - halfButtons;\n    let endPage = currentPage + halfButtons;\n    if (startPage <= 0) {\n      startPage = 1;\n      endPage = Math.min(maxPageButtons, totalPages);\n    }\n    if (endPage > totalPages) {\n      endPage = totalPages;\n      startPage = Math.max(1, totalPages - maxPageButtons + 1);\n    }\n    if (startPage > 1) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n        label: '<<',\n        onClick: () => paginate(1),\n        buttonType: \"double-arrow\"\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this));\n      if (startPage > 1) {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n          label: '...',\n          onClick: () => paginate(startPage - 1),\n          buttonType: \"ellipsis\"\n        }, \"left-dots\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n        label: i,\n        onClick: () => paginate(i),\n        buttonType: i === currentPage ? \"current\" : \"normal\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this));\n    }\n    if (endPage < totalPages) {\n      if (endPage < totalPages - 1) {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n          label: '...',\n          onClick: () => paginate(endPage + 1),\n          buttonType: \"ellipsis\"\n        }, \"right-dots\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this));\n      }\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n        label: '>>',\n        onClick: () => paginate(totalPages),\n        buttonType: \"double-arrow\"\n      }, totalPages, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this));\n    }\n    return pageNumbers;\n  };\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currentTime, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), currentDateLV, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), \"AIZVIETO\\u0160ANAS LAPA\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), currentDate, /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"dataTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Aizvietot\\u0101js\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Stunda\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Klase\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Kab.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Prome\\u0161osais skolot\\u0101js\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Piez\\u012Bmes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          className: \"dataBody\",\n          children: sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => /*#__PURE__*/_jsxDEV(DataTable, {\n            data: data,\n            currentDate: currentDate\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"itemsPerPage\",\n        onChange: handleItemsPerPageChange,\n        placeholder: \"Items per page...\",\n        min: \"1\",\n        className: \"itemsPerPageInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paginationContainer\",\n        children: renderPageNumbers()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"frs6MSdgTCdnaAL5LA10BWrT6nc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DataTable","jsxDEV","_jsxDEV","App","_s","currentTime","setCurrentTime","getFormattedTime","currentDateLV","setCurrentDateLV","getFormattedLatvianDate","currentDate","setCurrentDate","getFormattedDate","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","maxPageButtons","PageButton","label","onClick","buttonType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleItemsPerPageChange","e","selectedValue","parseInt","target","value","alert","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","daysOfWeek","months","dayOfWeek","getDay","dayOfMonth","updateCurrentTime","updateCurrentDate","updateCurrentDateLV","intervalId","setInterval","clearInterval","romanToNumber","roman","romanNumeralMap","I","II","III","IV","V","VI","sortData","data","columns","sortedData","sort","a","b","i","length","column","valueA","valueB","regex","matchA","match","matchB","numComparison","romanComparison","localeCompare","sensitivity","comparison","spreadsheetData","setSpreadsheetData","runCSharpScript","response","fetch","method","headers","ok","Error","jsonData","json","console","log","error","totalPages","Math","ceil","renderPageNumbers","pageNumbers","halfButtons","floor","startPage","endPage","min","max","push","paginate","pageNumber","sortedFilteredData","slice","map","index","type","id","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DataTable from './Data_table';\nimport './App.css';\n\nfunction App() {\n    const [currentTime, setCurrentTime] = useState(getFormattedTime());\n    const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n    const [currentDate, setCurrentDate] = useState(getFormattedDate());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [itemsPerPage, setItemsPerPage] = useState(10);\n    const [maxPageButtons] = useState(5);\n\n\n    const PageButton = ({ label, onClick, buttonType }) => (\n        <button onClick={onClick} className={`page-button ${buttonType}`}>\n            {label}\n        </button>\n    );\n\n    const handleItemsPerPageChange = (e) => {\n        const selectedValue = parseInt(e.target.value, 10);\n        setItemsPerPage(selectedValue);\n        setCurrentPage(1);\n        if (selectedValue > 1000) {\n            alert('Warning: Large number of items per page may cause performance issues.');\n        }\n    };\n\n    function getFormattedTime() {\n        const currentDate = new Date();\n        const hours = currentDate.getHours();\n        const minutes = currentDate.getMinutes();\n        const seconds = currentDate.getSeconds();\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n    function getFormattedDate(date) {\n        if (!date) {\n            date = new Date();  // Если date не передан, используем текущую дату\n        }\n\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n\n        return `${day}.${month}.${year}`;\n    }\n\n    function getFormattedLatvianDate() {\n        const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n        const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n\n        const currentDate = new Date();\n        const dayOfWeek = daysOfWeek[currentDate.getDay()];\n        const dayOfMonth = currentDate.getDate();\n        const month = months[currentDate.getMonth()];\n\n        return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n    }\n\n    function updateCurrentTime() {\n        setCurrentTime(getFormattedTime());\n    }\n\n    function updateCurrentDate() {\n        setCurrentDate(getFormattedDate());  // Без передачи аргумента\n    }\n\n    function updateCurrentDateLV() {\n        setCurrentDateLV(getFormattedLatvianDate());\n    }\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n\n    const romanToNumber = (roman) => {\n        const romanNumeralMap = {\n            I: 1,\n            II: 2,\n            III: 3,\n            IV: 4,\n            V: 5,\n            VI: 6\n            // Добавьте другие римские цифры при необходимости\n        };\n\n        return romanNumeralMap[roman] || 0;\n    };\n\n    const sortData = (data, columns) => {\n        const sortedData = [...data];\n\n        sortedData.sort((a, b) => {\n            for (let i = 0; i < columns.length; i++) {\n                const column = columns[i];\n                const valueA = a[column] || '';\n                const valueB = b[column] || '';\n\n                if (column === 'class') {\n                    // Разделить значение столбца 'class' на числовую и буквенную части\n                    const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n                    const matchA = valueA.match(regex);\n                    const matchB = valueB.match(regex);\n\n                    if (matchA && matchB) {\n                        // Сравнить числовые части\n                        const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n\n                        if (numComparison !== 0) {\n                            // Если числовые части не равны, вернуть результат\n                            return numComparison;\n                        }\n\n                        // Если числовые части равны, сравнить римские цифры\n                        const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n\n                        if (romanComparison !== 0) {\n                            return romanComparison;\n                        }\n\n                        // Сравнить буквенные части без учета регистра и диакритических знаков\n                        return matchA[2].localeCompare(matchB[2], 'en', { sensitivity: 'base' });\n                    } else {\n                        // Если не удалось разделить на числовую и буквенную части, вернуть 0\n                        return 0;\n                    }\n                } else {\n                    // Логика фильтрации для других столбцов\n                    const comparison = valueA.localeCompare(valueB);\n\n                    if (comparison !== 0) {\n                        return comparison;\n                    }\n                }\n            }\n            return 0;\n        });\n\n        return sortedData;\n    };\n\n\n    const [spreadsheetData, setSpreadsheetData] = useState([]);\n\n    useEffect(() => {\n        const runCSharpScript = async () => {\n            try {\n                const response = await fetch('http://localhost:3001/runCSharpScript', {\n                    method: 'POST', // Указываем метод POST\n                    headers: {\n                        'Content-Type': 'application/json', // Устанавливаем тип содержимого\n                    },\n                    // Можно добавить тело запроса, если необходимо передавать данные\n                    // body: JSON.stringify({ key: 'value' }),\n                });\n\n                if (!response.ok) {\n                    throw new Error('Failed to run C# script on the server');\n                }\n\n                const jsonData = await response.json();\n                console.log('C# script executed successfully. Data from the server:', jsonData.data);\n            } catch (error) {\n                console.error('Error running C# script:', error);\n            }\n        };\n\n        // Вызываем функцию для отправки POST-запроса\n        runCSharpScript();\n\n\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData]);\n\n\n    const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n\n    const renderPageNumbers = () => {\n        const pageNumbers = [];\n        const halfButtons = Math.floor(maxPageButtons / 2);\n\n        let startPage = currentPage - halfButtons;\n        let endPage = currentPage + halfButtons;\n\n        if (startPage <= 0) {\n            startPage = 1;\n            endPage = Math.min(maxPageButtons, totalPages);\n        }\n\n        if (endPage > totalPages) {\n            endPage = totalPages;\n            startPage = Math.max(1, totalPages - maxPageButtons + 1);\n        }\n\n        if (startPage > 1) {\n            pageNumbers.push(\n                <PageButton key={1} label={'<<'} onClick={() => paginate(1)} buttonType=\"double-arrow\" />\n            );\n\n            if (startPage > 1) {\n                pageNumbers.push(\n                    <PageButton\n                        key=\"left-dots\"\n                        label={'...'}\n                        onClick={() => paginate(startPage - 1)}\n                        buttonType=\"ellipsis\"\n                    />\n                );\n            }\n        }\n\n        for (let i = startPage; i <= endPage; i++) {\n            pageNumbers.push(\n                <PageButton\n                    key={i}\n                    label={i}\n                    onClick={() => paginate(i)}\n                    buttonType={i === currentPage ? \"current\" : \"normal\"}\n                />\n            );\n        }\n\n        if (endPage < totalPages) {\n            if (endPage < totalPages - 1) {\n                pageNumbers.push(\n                    <PageButton\n                        key=\"right-dots\"\n                        label={'...'}\n                        onClick={() => paginate(endPage + 1)}\n                        buttonType=\"ellipsis\"\n                    />\n                );\n            }\n            pageNumbers.push(\n                <PageButton\n                    key={totalPages}\n                    label={'>>'}\n                    onClick={() => paginate(totalPages)}\n                    buttonType=\"double-arrow\"\n                />\n            );\n        }\n\n        return pageNumbers;\n    };\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n\n    return (\n        <div>\n            <div>\n                {currentTime}\n                <br />\n                {currentDateLV}\n                <br />\n                AIZVIETOŠANAS LAPA\n                <br />\n                {currentDate}\n                <table className=\"dataTable\">\n                    <thead>\n                        <tr>\n                            <th>Aizvietotājs</th>\n                            <th>Stunda</th>\n                            <th>Klase</th>\n                            <th>Kab.</th>\n                            <th>Promešosais skolotājs</th>\n                            <th>Piezīmes</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"dataBody\">\n                        {sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => (\n                            <DataTable\n                                key={index}\n                                data={data}\n                                currentDate={currentDate}\n                            />\n                        ))}\n\n                    </tbody>\n                </table>\n                <input\n                    type=\"number\"\n                    id=\"itemsPerPage\"\n                    onChange={handleItemsPerPageChange}\n                    placeholder=\"Items per page...\"\n                    min=\"1\"\n                    className=\"itemsPerPageInput\"\n                />\n\n                <div className=\"paginationContainer\">\n                    {renderPageNumbers()}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}