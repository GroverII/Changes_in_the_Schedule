{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\adminToServer.js\",\n  _s = $RefreshSig$();\n// adminToServer.js\nimport { useDrag } from 'react-dnd';\nimport ReactPlayer from 'react-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const url = 'http://localhost:3001/'; // Замените на ваш URL сервера, если нужно\n\n// Функция для определения типа файла на основе его расширения\nexport const getFileType = fileName => {\n  const extension = fileName.split('.').pop().toLowerCase();\n  if (['jpg', 'jpeg', 'png', 'gif'].includes(extension)) {\n    return 'foto';\n  } else if (['mp4', 'avi', 'mkv', 'mov'].includes(extension)) {\n    return 'video';\n  } else if (['txt', 'doc', 'docx', 'pdf'].includes(extension)) {\n    return 'text';\n  } else if (/(https?:\\/\\/.*\\.(?:png|jpg|jpeg|gif|mp4|avi|mkv|mov))/.test(fileName)) {\n    // Если ссылка на изображение или видео\n    if (/\\.(png|jpg|jpeg|gif)$/.test(fileName)) {\n      return 'foto';\n    } else if (/\\.(mp4|avi|mkv|mov)$/.test(fileName)) {\n      return 'video';\n    }\n  } else if (/youtu\\.?be/.test(fileName)) {\n    return 'youtube';\n  }\n  return null; // Неизвестный тип файла\n};\nexport const getSourcesList = async folderName => {\n  try {\n    const response = await fetch(url + `getAllSourcesDir/${folderName}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting sources list:', error);\n    throw error;\n  }\n};\nexport const getAllFileFolders = async () => {\n  try {\n    const response = await fetch(url + 'getAllSourceDirs');\n    const data = await response.json();\n    return data.folders || []; // Извлекаем массив папок из объекта, если он существует, иначе возвращаем пустой массив\n  } catch (error) {\n    console.error('Error getting folders:', error);\n    throw error;\n  }\n};\nexport const getFilesInThisFolder = async folderName => {\n  try {\n    const response = await fetch(`${url}getFilesInFolder/${encodeURIComponent(folderName)}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting files in folder:', error);\n    throw error;\n  }\n};\nexport const renameFolder = async (folderName, newFolderName) => {\n  return await fetch(`${url}renameSourceDir/${encodeURIComponent(folderName)}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      newFolderName: newFolderName\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Kļūda, mainot mapes nosaukumu');\n    }\n    return response.json();\n  });\n};\nexport const addSourceFolder = async folderName => {\n  try {\n    const response = await fetch(url + 'addSourceDir/' + folderName, {\n      method: 'POST'\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding folder:', error);\n    throw error;\n  }\n};\nexport const deleteSourceFolder = async fileName => {\n  try {\n    const response = await fetch(url + `deleteSourceDir/${fileName}`, {\n      method: 'DELETE'\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error deleting folder:', error);\n    throw error;\n  }\n};\nexport const getFileDisplay = (dir, file) => {\n  switch (file.type) {\n    case 'text':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `${url}getSource/${dir}/${file.file}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"previewItemLink\",\n        children: file.file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this);\n    case 'foto':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `${url}getSource/${dir}/${file.file}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${url}getSource/${dir}/${file.file}`,\n          alt: `Attēls ${file.index}`,\n          className: \"previewImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this);\n    case 'video':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `${url}getSource/${dir}/${file.file}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          src: `${url}getSource/${dir}/${file.file}`,\n          controls: true,\n          className: \"previewVideo\",\n          autoPlay: true,\n          loop: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this);\n    case 'URL(foto)':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: file.file,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: file.file,\n          alt: `Attēls ${file.index}`,\n          className: \"previewImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this);\n    case 'URL(video)':\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: file.file,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: file.file,\n          width: \"100%\",\n          height: \"7.4vh\",\n          playing: true,\n          controls: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: `${url}getSource/${dir}/${file.file}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this);\n  }\n};\nexport function isValidURL(string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\nexport const getFileTypeFromURL = async url => {\n  try {\n    // Проверяем, является ли URL ссылкой на YouTube\n    if (url.includes('youtu.be') || url.includes('youtube.com')) {\n      return 'URL(video)';\n    } else {\n      // Если URL не является ссылкой на YouTube, проверяем тип контента\n      const response = await fetch(`${url}proxy?url=${encodeURIComponent(url)}`);\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('image')) {\n        return 'URL(foto)';\n      } else if (contentType && contentType.includes('video')) {\n        return 'URL(video)';\n      }\n    }\n  } catch (error) {\n    console.error('Error fetching URL:', error);\n  }\n  return null; // Если тип файла не определен или возникла ошибка\n};\nexport const updateConfig = async updates => {\n  try {\n    const response = await fetch(url + 'updateConfig', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating config:', error);\n    throw error;\n  }\n};\nexport const deleteSource = async (selectedFolder, type, fileName) => {\n  try {\n    const encodedFileName = encodeURIComponent(fileName);\n    const response = await fetch(url + `deleteSourceFile/${selectedFolder}/${encodedFileName}`, {\n      method: 'DELETE'\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting file:', error);\n    throw error;\n  }\n};\nexport function DraggableItem({\n  index,\n  type,\n  handleDrag,\n  children\n}) {\n  _s();\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  drag(handleDrag(index, type));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drag,\n    style: {\n      opacity: isDragging ? 0.5 : 1\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n}\n_s(DraggableItem, \"wuumsFp4qAni9XRJfRhQAZjuD/k=\", false, function () {\n  return [useDrag];\n});\n_c = DraggableItem;\nexport const authenticate = async (login, password, recaptchaToken) => {\n  try {\n    // Отправляем данные на сервер для аутентификации\n    const response = await fetch(url + 'login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login: login,\n        password: password,\n        recaptchaToken: recaptchaToken\n      })\n    });\n\n    // Возвращаем результат аутентификации\n    return response;\n  } catch (error) {\n    // Если произошла ошибка, возвращаем ее\n    throw error;\n  }\n};\nexport const changeLogin = async (oldLogin, newLogin, password) => {\n  try {\n    const response = await fetch(url + 'changelogin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        oldLogin,\n        newLogin,\n        password\n      })\n    });\n    if (response.ok) {\n      return {\n        success: true\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Failed to update login'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: 'Network error. Failed to update login'\n    };\n  }\n};\nexport const runCSharpScript = async () => {\n  try {\n    const response = await fetch(url + 'runCSharpScript', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to run C# script on the server. HTTP status: ${response.status}`);\n    }\n    const jsonData = await response.json();\n    if (!jsonData.data.trim()) {\n      console.error('Empty response data received from the server.');\n      return;\n    }\n    let dataArray;\n    try {\n      dataArray = JSON.parse(jsonData.data);\n    } catch (parseError) {\n      throw new Error(`Error parsing JSON data: ${parseError}`);\n    }\n    if (!Array.isArray(dataArray)) {\n      throw new Error(`Data is not an array: ${dataArray}`);\n    }\n    return dataArray;\n  } catch (error) {\n    throw new Error(`Error during C# script execution: ${error}`);\n  }\n};\nexport const getConfig = async () => {\n  try {\n    const response = await fetch(url + 'getConfig');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch configuration. HTTP status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.config;\n  } catch (error) {\n    throw new Error(`Error fetching configuration: ${error}`);\n  }\n};\nexport const getCSharpScriptConfigAsnc = async () => {\n  try {\n    const response = await fetch(url + 'getCSharpScriptConfig');\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw new Error(`Error fetching C# Script configuration: ${error}`);\n  }\n};\nexport const updateStyles = async bodyData => {\n  try {\n    const response = await fetch(url + 'updateStyles', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyData)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error updating styles:', error);\n  }\n};\nexport const applyTableStylesAsync = async (headerStyles, cellStyles) => {\n  try {\n    const headerStylesToSend = {\n      fontSize: headerStyles.fontSize,\n      fontFamily: headerStyles.fontFamily,\n      fontWeight: headerStyles.fontWeight,\n      color: headerStyles.color // Добавьте цвет для заголовка, если это необходимо\n      // Другие свойства, если есть\n    };\n    const cellStylesToSend = {\n      fontSize: cellStyles.fontSize,\n      fontFamily: cellStyles.fontFamily,\n      fontWeight: cellStyles.fontWeight,\n      color: cellStyles.color // Добавьте цвет для ячеек, если это необходимо\n      // Другие свойства, если есть\n    };\n    const response = await fetch(url + 'updateStyles', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        headerStyles: headerStylesToSend,\n        cellStyles: cellStylesToSend\n      })\n    });\n    const data = await response.json();\n    return data; // Возвращаем данные для обработки на стороне клиента\n  } catch (error) {\n    console.error('Error applying table styles:', error);\n    throw error; // Перехватываем ошибку и пробрасываем её дальше\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"DraggableItem\");","map":{"version":3,"names":["useDrag","ReactPlayer","jsxDEV","_jsxDEV","url","getFileType","fileName","extension","split","pop","toLowerCase","includes","test","getSourcesList","folderName","response","fetch","json","error","console","getAllFileFolders","data","folders","getFilesInThisFolder","encodeURIComponent","renameFolder","newFolderName","method","headers","body","JSON","stringify","then","ok","Error","addSourceFolder","deleteSourceFolder","getFileDisplay","dir","file","type","href","target","rel","className","children","_jsxFileName","lineNumber","columnNumber","src","alt","index","controls","autoPlay","loop","muted","width","height","playing","isValidURL","string","URL","_","getFileTypeFromURL","contentType","get","updateConfig","updates","deleteSource","selectedFolder","encodedFileName","DraggableItem","handleDrag","_s","isDragging","drag","item","collect","monitor","ref","style","opacity","_c","authenticate","login","password","recaptchaToken","changeLogin","oldLogin","newLogin","success","runCSharpScript","status","jsonData","trim","dataArray","parse","parseError","Array","isArray","getConfig","config","getCSharpScriptConfigAsnc","updateStyles","bodyData","applyTableStylesAsync","headerStyles","cellStyles","headerStylesToSend","fontSize","fontFamily","fontWeight","color","cellStylesToSend","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/adminToServer.js"],"sourcesContent":["// adminToServer.js\r\nimport { useDrag } from 'react-dnd';\r\nimport ReactPlayer from 'react-player';\r\n\r\nexport const url = 'http://localhost:3001/'; // Замените на ваш URL сервера, если нужно\r\n\r\n// Функция для определения типа файла на основе его расширения\r\nexport const getFileType = (fileName) => {\r\n    const extension = fileName.split('.').pop().toLowerCase();\r\n    if (['jpg', 'jpeg', 'png', 'gif'].includes(extension)) {\r\n        return 'foto';\r\n    } else if (['mp4', 'avi', 'mkv', 'mov'].includes(extension)) {\r\n        return 'video';\r\n    } else if (['txt', 'doc', 'docx', 'pdf'].includes(extension)) {\r\n        return 'text';\r\n    } else if (/(https?:\\/\\/.*\\.(?:png|jpg|jpeg|gif|mp4|avi|mkv|mov))/.test(fileName)) {\r\n        // Если ссылка на изображение или видео\r\n        if (/\\.(png|jpg|jpeg|gif)$/.test(fileName)) {\r\n            return 'foto';\r\n        } else if (/\\.(mp4|avi|mkv|mov)$/.test(fileName)) {\r\n            return 'video';\r\n        }\r\n    } else if (/youtu\\.?be/.test(fileName)) {\r\n        return 'youtube';\r\n    }\r\n    return null; // Неизвестный тип файла\r\n};\r\n\r\n\r\nexport const getSourcesList = async (folderName) => {\r\n    try {\r\n        const response = await fetch(url + `getAllSourcesDir/${folderName}`);\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error getting sources list:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const getAllFileFolders = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getAllSourceDirs');\r\n        const data = await response.json();\r\n        return data.folders || []; // Извлекаем массив папок из объекта, если он существует, иначе возвращаем пустой массив\r\n    } catch (error) {\r\n        console.error('Error getting folders:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const getFilesInThisFolder = async (folderName) => {\r\n    try {\r\n        const response = await fetch(`${url}getFilesInFolder/${encodeURIComponent(folderName)}`);\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error getting files in folder:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const renameFolder = async (folderName, newFolderName) => {\r\n    return await fetch(`${url}renameSourceDir/${encodeURIComponent(folderName)}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ newFolderName: newFolderName })\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Kļūda, mainot mapes nosaukumu');\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\nexport const addSourceFolder = async (folderName) => {\r\n    try {\r\n        const response = await fetch(url + 'addSourceDir/' + folderName, {\r\n            method: 'POST'\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error adding folder:', error);\r\n        throw error;\r\n    }\r\n};\r\nexport const deleteSourceFolder = async (fileName) => {\r\n    try {\r\n        const response = await fetch(url + `deleteSourceDir/${fileName}`, {\r\n            method: 'DELETE',\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error deleting folder:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getFileDisplay = (dir, file) => {\r\n    switch (file.type) {\r\n        case 'text':\r\n            return (\r\n                <a href={`${url}getSource/${dir}/${file.file}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"previewItemLink\">\r\n                    {file.file}\r\n                </a>\r\n            );\r\n        case 'foto':\r\n            return (\r\n                <a href={`${url}getSource/${dir}/${file.file}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src={`${url}getSource/${dir}/${file.file}`} alt={`Attēls ${file.index}`} className=\"previewImage\" />\r\n                </a>\r\n            );\r\n        case 'video':\r\n            return (\r\n                <a href={`${url}getSource/${dir}/${file.file}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <video src={`${url}getSource/${dir}/${file.file}`} controls className=\"previewVideo\" autoPlay loop muted />\r\n                </a>\r\n            );\r\n        case 'URL(foto)':\r\n            return (\r\n                <a href={file.file} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src={file.file} alt={`Attēls ${file.index}`} className=\"previewImage\" />\r\n                </a>\r\n            );\r\n        case 'URL(video)':\r\n            return (\r\n                <a href={file.file} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <ReactPlayer\r\n                        url={file.file}\r\n                        width=\"100%\"\r\n                        height=\"7.4vh\"\r\n                        playing\r\n                        controls\r\n                        muted\r\n                    />\r\n                </a>\r\n            );\r\n        default:\r\n            return (\r\n                <div>{`${url}getSource/${dir}/${file.file}`}</div>\r\n            );\r\n    }\r\n};\r\n\r\n\r\nexport function isValidURL(string) {\r\n    try {\r\n        new URL(string);\r\n        return true;\r\n    } catch (_) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const getFileTypeFromURL = async (url) => {\r\n    try {\r\n        // Проверяем, является ли URL ссылкой на YouTube\r\n        if (url.includes('youtu.be') || url.includes('youtube.com')) {\r\n            return 'URL(video)';\r\n        } else {\r\n            // Если URL не является ссылкой на YouTube, проверяем тип контента\r\n            const response = await fetch(`${url}proxy?url=${encodeURIComponent(url)}`);\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('image')) {\r\n                return 'URL(foto)';\r\n            } else if (contentType && contentType.includes('video')) {\r\n                return 'URL(video)';\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error('Error fetching URL:', error);\r\n    }\r\n\r\n    return null; // Если тип файла не определен или возникла ошибка\r\n};\r\n\r\n\r\nexport const updateConfig = async (updates) => {\r\n    try {\r\n        const response = await fetch(url + 'updateConfig', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(updates)\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error updating config:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const deleteSource = async (selectedFolder, type, fileName) => {\r\n    try {\r\n        const encodedFileName = encodeURIComponent(fileName);\r\n\r\n        const response = await fetch(url + `deleteSourceFile/${selectedFolder}/${encodedFileName}`, {\r\n            method: 'DELETE',\r\n        });\r\n        return response.ok;\r\n    } catch (error) {\r\n        console.error('Error deleting file:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport function DraggableItem({ index, type, handleDrag, children }) {\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type, index },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    drag(handleDrag(index, type));\r\n\r\n    return (\r\n        <div ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport const authenticate = async (login, password, recaptchaToken) => {\r\n    try {\r\n        // Отправляем данные на сервер для аутентификации\r\n        const response = await fetch(url + 'login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                login: login,\r\n                password: password,\r\n                recaptchaToken: recaptchaToken\r\n            }),\r\n        });\r\n\r\n        // Возвращаем результат аутентификации\r\n        return response;\r\n    } catch (error) {\r\n        // Если произошла ошибка, возвращаем ее\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const changeLogin = async (oldLogin, newLogin, password) => {\r\n    try {\r\n        const response = await fetch(url + 'changelogin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ oldLogin, newLogin, password }),\r\n        });\r\n\r\n        if (response.ok) {\r\n            return { success: true };\r\n        } else {\r\n            return { success: false, error: 'Failed to update login' };\r\n        }\r\n    } catch (error) {\r\n        return { success: false, error: 'Network error. Failed to update login' };\r\n    }\r\n};\r\n\r\nexport const runCSharpScript = async () => {\r\n    try {\r\n        const response = await fetch(url + 'runCSharpScript', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to run C# script on the server. HTTP status: ${response.status}`);\r\n        }\r\n\r\n        const jsonData = await response.json();\r\n\r\n        if (!jsonData.data.trim()) {\r\n            console.error('Empty response data received from the server.');\r\n            return;\r\n        }\r\n\r\n        let dataArray;\r\n\r\n        try {\r\n            dataArray = JSON.parse(jsonData.data);\r\n        } catch (parseError) {\r\n            throw new Error(`Error parsing JSON data: ${parseError}`);\r\n        }\r\n\r\n        if (!Array.isArray(dataArray)) {\r\n            throw new Error(`Data is not an array: ${dataArray}`);\r\n        }\r\n\r\n        return dataArray;\r\n    } catch (error) {\r\n        throw new Error(`Error during C# script execution: ${error}`);\r\n    }\r\n};\r\n\r\nexport const getConfig = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getConfig');\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to fetch configuration. HTTP status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.config;\r\n    } catch (error) {\r\n        throw new Error(`Error fetching configuration: ${error}`);\r\n    }\r\n};\r\n\r\nexport const getCSharpScriptConfigAsnc = async () => {\r\n    try {\r\n        const response = await fetch(url + 'getCSharpScriptConfig');\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Error fetching C# Script configuration: ${error}`);\r\n    }\r\n};\r\n\r\nexport const updateStyles = async (bodyData) => {\r\n    try {\r\n        const response = await fetch(url + 'updateStyles', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(bodyData)\r\n        });\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error updating styles:', error);\r\n    }\r\n};\r\n\r\nexport const applyTableStylesAsync = async (headerStyles, cellStyles) => {\r\n    try {\r\n        const headerStylesToSend = {\r\n            fontSize: headerStyles.fontSize,\r\n            fontFamily: headerStyles.fontFamily,\r\n            fontWeight: headerStyles.fontWeight,\r\n            color: headerStyles.color // Добавьте цвет для заголовка, если это необходимо\r\n            // Другие свойства, если есть\r\n        };\r\n        const cellStylesToSend = {\r\n            fontSize: cellStyles.fontSize,\r\n            fontFamily: cellStyles.fontFamily,\r\n            fontWeight: cellStyles.fontWeight,\r\n            color: cellStyles.color // Добавьте цвет для ячеек, если это необходимо\r\n            // Другие свойства, если есть\r\n        };\r\n        const response = await fetch(url + 'updateStyles', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ headerStyles: headerStylesToSend, cellStyles: cellStylesToSend })\r\n        });\r\n        const data = await response.json();\r\n        return data; // Возвращаем данные для обработки на стороне клиента\r\n    } catch (error) {\r\n        console.error('Error applying table styles:', error);\r\n        throw error; // Перехватываем ошибку и пробрасываем её дальше\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}