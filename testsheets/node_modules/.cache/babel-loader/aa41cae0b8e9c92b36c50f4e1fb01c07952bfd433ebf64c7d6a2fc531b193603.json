{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport DataTable from './Data_table';\nimport './styles.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [photoList, setPhotoList] = useState([]);\n  const [currentTime, setCurrentTime] = useState(getFormattedTime());\n  const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n  const [currentDate, setCurrentDate] = useState(getFormattedDate());\n  const [currentPage, setCurrentPage] = useState(1);\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [itemsPerPage] = useState(20);\n  const url = 'http://localhost:3001/';\n  const renderContent = () => {\n    if (currentPage > totalPages) {\n      // Отображение фото\n      const photoIndex = currentPage - totalPages - 1;\n      const photo = photoList[photoIndex];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"photoContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${url}getImage/${photo}`,\n          alt: `Sheet ${currentPage}`,\n          className: \"photoImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Отображение таблицы данных\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"fl-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Aizvietot\\u0101js\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Stunda\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Klase\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Kab.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Prome\\u0161osais skolot\\u0101js\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Piez\\u012Bmes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"dataBody\",\n            children: sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => /*#__PURE__*/_jsxDEV(DataTable, {\n              data: data,\n              currentDate: currentDate\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  useEffect(() => {\n    const fetchPhotoList = async () => {\n      try {\n        const response = await fetch(url + 'getPhotoList');\n        if (!response.ok) {\n          console.error('Failed to fetch photo list. HTTP status:', response.status);\n          throw new Error('Failed to fetch photo list');\n        }\n        const {\n          photoList\n        } = await response.json();\n        setPhotoList(photoList);\n      } catch (error) {\n        console.error('Error fetching photo list:', error);\n      }\n    };\n\n    // Запускаем функцию для получения списка фото\n    fetchPhotoList();\n  }, []);\n  const PageButton = ({\n    onClick,\n    isActive\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    className: `button-81 ${isActive ? 'active' : ''}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n  function getFormattedTime() {\n    const currentDate = new Date();\n    const hours = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const seconds = currentDate.getSeconds();\n    const formattedHours = String(hours).padStart(2, '0');\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(seconds).padStart(2, '0');\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  }\n  function getFormattedDate(date) {\n    if (!date) {\n      date = new Date();\n    }\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}.`;\n  }\n  function getFormattedLatvianDate() {\n    const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n    const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n    const currentDate = new Date();\n    const dayOfWeek = daysOfWeek[currentDate.getDay()];\n    const dayOfMonth = currentDate.getDate();\n    const month = months[currentDate.getMonth()];\n    return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n  }\n  const updateCurrentTime = useCallback(() => {\n    setCurrentTime(getFormattedTime());\n  }, []);\n  const updateCurrentDate = useCallback(() => {\n    setCurrentDate(getFormattedDate());\n  }, []);\n  const updateCurrentDateLV = useCallback(() => {\n    setCurrentDateLV(getFormattedLatvianDate());\n  }, []);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n  const romanToNumber = roman => {\n    const romanNumeralMap = {\n      I: 1,\n      II: 2,\n      III: 3\n    };\n    return romanNumeralMap[roman] || 0;\n  };\n  const sortData = (data, columns) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => {\n      for (let i = 0; i < columns.length; i++) {\n        const column = columns[i];\n        const valueA = a[column] || '';\n        const valueB = b[column] || '';\n        if (column === 'class') {\n          const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n          const matchA = valueA.match(regex);\n          const matchB = valueB.match(regex);\n          if (matchA && matchB) {\n            const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n            if (numComparison !== 0) {\n              return numComparison;\n            }\n            const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n            if (romanComparison !== 0) {\n              return romanComparison;\n            }\n            return matchA[2].localeCompare(matchB[2], 'en', {\n              sensitivity: 'base'\n            });\n          } else {\n            return 0;\n          }\n        } else {\n          const comparison = valueA.localeCompare(valueB, 'en', {\n            sensitivity: 'base'\n          });\n          if (comparison !== 0) {\n            return comparison;\n          }\n        }\n      }\n      return 0;\n    });\n    return sortedData;\n  };\n  useEffect(() => {\n    const runCSharpScript = async () => {\n      try {\n        console.log('Sending a POST request to run C# script...');\n        const response = await fetch(url + 'runCSharpScript', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Server response received:', response);\n        if (!response.ok) {\n          console.error('Failed to run C# script on the server. HTTP status:', response.status);\n          throw new Error('Failed to run C# script on the server');\n        }\n        const JsonData = await response.text(); // Get the raw text response\n\n        const jsonData = JSON.parse(JsonData); // Parse the cleaned JSON string\n\n        let dataArray = JSON.parse(jsonData.data);\n\n        // Заполняем пропуски в свойстве \"date\"\n        for (let i = 0; i < dataArray.length; i++) {\n          if (dataArray[i].date === null || dataArray[i].date === \"\") {\n            dataArray[i].date = dataArray[i - 1].date;\n          }\n        }\n\n        // Удаляем элементы, у которых все свойства (кроме \"date\") пусты\n        dataArray = dataArray.filter(item => {\n          if (item.subst_person === \"\" || item.subst_person === \"nav stundas\") return false; // Все свойства (кроме \"date\") пусты, удаляем элемент\n          return true;\n        });\n        const filteredData = filterDataByCurrentDate(dataArray, currentDate);\n        console.log('C# script executed successfully. Data from the server:', filteredData);\n        setSpreadsheetData(filteredData);\n      } catch (error) {\n        console.error('Error running C# script:', error);\n      }\n    };\n\n    // Вызываем функцию для отправки POST-запроса\n    runCSharpScript();\n    const intervalId = setInterval(() => {\n      updateCurrentTime();\n      updateCurrentDateLV();\n      updateCurrentDate();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData, currentDate]);\n  const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n    for (let i = 1; i <= totalPages + photoList.length; i++) {\n      if (photoList[i - totalPages - 1] !== \"logo.png\") {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(PageButton, {\n          onClick: () => paginate(i),\n          isActive: i === currentPage\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return pageNumbers;\n  };\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n    if (pageNumber > totalPages) console.log(`Clicked on photo page ${pageNumber}`);\n  };\n  const filterDataByCurrentDate = (data, currentDate) => {\n    return data.filter(item => {\n      const itemDate = item.date;\n      return itemDate === currentDate;\n    });\n  };\n  const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currentTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AIZVIETO\\u0160ANAS LAPA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentDateLV\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), renderContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paginationContainer\",\n      children: renderPageNumbers()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"YeDFrh1v0CbLMRczZ7TQ9SgZVtw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","DataTable","jsxDEV","_jsxDEV","App","_s","photoList","setPhotoList","currentTime","setCurrentTime","getFormattedTime","currentDateLV","setCurrentDateLV","getFormattedLatvianDate","currentDate","setCurrentDate","getFormattedDate","currentPage","setCurrentPage","spreadsheetData","setSpreadsheetData","itemsPerPage","url","renderContent","totalPages","photoIndex","photo","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","sortedFilteredData","slice","map","data","index","fetchPhotoList","response","fetch","ok","console","error","status","Error","json","PageButton","onClick","isActive","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedHours","String","padStart","formattedMinutes","formattedSeconds","date","day","getDate","month","getMonth","year","getFullYear","daysOfWeek","months","dayOfWeek","getDay","dayOfMonth","updateCurrentTime","updateCurrentDate","updateCurrentDateLV","intervalId","setInterval","clearInterval","romanToNumber","roman","romanNumeralMap","I","II","III","sortData","columns","sortedData","sort","a","b","i","length","column","valueA","valueB","regex","matchA","match","matchB","numComparison","parseInt","romanComparison","localeCompare","sensitivity","comparison","runCSharpScript","log","method","headers","JsonData","text","jsonData","JSON","parse","dataArray","filter","item","subst_person","filteredData","filterDataByCurrentDate","Math","ceil","renderPageNumbers","pageNumbers","push","paginate","pageNumber","itemDate","_c","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport DataTable from './Data_table';\nimport './styles.css';\nimport './App.css';\n\nfunction App() {\n    const [photoList, setPhotoList] = useState([]);\n    const [currentTime, setCurrentTime] = useState(getFormattedTime());\n    const [currentDateLV, setCurrentDateLV] = useState(getFormattedLatvianDate());\n    const [currentDate, setCurrentDate] = useState(getFormattedDate());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [spreadsheetData, setSpreadsheetData] = useState([]);\n    const [itemsPerPage] = useState(20);\n    const url = 'http://localhost:3001/';\n\n    const renderContent = () => {\r\n        if (currentPage > totalPages) {\r\n            // Отображение фото\r\n            const photoIndex = currentPage - totalPages - 1;\r\n            const photo = photoList[photoIndex];\r\n            return (\r\n                <div className=\"photoContainer\">\r\n                    <img\r\n                        src={`${url}getImage/${photo}`}\r\n                        alt={`Sheet ${currentPage}`}\r\n                        className=\"photoImage\"\r\n                    />\r\n                </div>\r\n\r\n            );\r\n        } else {\r\n            // Отображение таблицы данных\r\n            return (\r\n                <div className=\"table-wrapper\">\r\n                    <table className=\"fl-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Aizvietotājs</th>\r\n                                <th>Stunda</th>\r\n                                <th>Klase</th>\r\n                                <th>Kab.</th>\r\n                                <th>Promešosais skolotājs</th>\r\n                                <th>Piezīmes</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"dataBody\">\r\n                            {sortedFilteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((data, index) => (\r\n                                <DataTable\r\n                                    key={index}\r\n                                    data={data}\r\n                                    currentDate={currentDate}\r\n                                />\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        }\r\n    };\n\n    useEffect(() => {\n        const fetchPhotoList = async () => {\n            try {\n                const response = await fetch(url + 'getPhotoList');\n                if (!response.ok) {\n                    console.error('Failed to fetch photo list. HTTP status:', response.status);\n                    throw new Error('Failed to fetch photo list');\n                }\n                const { photoList } = await response.json();\n                setPhotoList(photoList);\n            } catch (error) {\n                console.error('Error fetching photo list:', error);\n            }\n        };\n\n        // Запускаем функцию для получения списка фото\n        fetchPhotoList();\n    }, []);\n\n\n    const PageButton = ({ onClick, isActive }) => (\n        <button onClick={onClick} className={`button-81 ${isActive ? 'active' : ''}`}>\n        </button>\n    );\n\n    function getFormattedTime() {\n        const currentDate = new Date();\n        const hours = currentDate.getHours();\n        const minutes = currentDate.getMinutes();\n        const seconds = currentDate.getSeconds();\n        const formattedHours = String(hours).padStart(2, '0');\n        const formattedMinutes = String(minutes).padStart(2, '0');\n        const formattedSeconds = String(seconds).padStart(2, '0');\n        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    }\n\n    function getFormattedDate(date) {\n        if (!date) {\n            date = new Date();\n        }\n\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n\n        return `${day}.${month}.${year}.`;\n    }\n\n    function getFormattedLatvianDate() {\n        const daysOfWeek = ['Svētdiena', 'Pirmdiena', 'Otrdiena', 'Trešdiena', 'Ceturtdiena', 'Piektdiena', 'Sestdiena'];\n        const months = ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris'];\n\n        const currentDate = new Date();\n        const dayOfWeek = daysOfWeek[currentDate.getDay()];\n        const dayOfMonth = currentDate.getDate();\n        const month = months[currentDate.getMonth()];\n\n        return `${dayOfWeek}, ${dayOfMonth}. ${month}`;\n    }\n\n    const updateCurrentTime = useCallback(() => {\n        setCurrentTime(getFormattedTime());\n    }, []);\n\n    const updateCurrentDate = useCallback(() => {\n        setCurrentDate(getFormattedDate());\n    }, []);\n\n    const updateCurrentDateLV = useCallback(() => {\n        setCurrentDateLV(getFormattedLatvianDate());\n    }, []);\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime]);\n\n    const romanToNumber = (roman) => {\n        const romanNumeralMap = {\n            I: 1,\n            II: 2,\n            III: 3\n        };\n\n        return romanNumeralMap[roman] || 0;\n    };\n\n    const sortData = (data, columns) => {\n        const sortedData = [...data];\n\n        sortedData.sort((a, b) => {\n            for (let i = 0; i < columns.length; i++) {\n                const column = columns[i];\n                const valueA = a[column] || '';\n                const valueB = b[column] || '';\n\n                if (column === 'class') {\n                    const regex = /^(\\d+)([^\\d]+)(?: \\(([^)]+)\\))?$/;\n                    const matchA = valueA.match(regex);\n                    const matchB = valueB.match(regex);\n\n                    if (matchA && matchB) {\n                        const numComparison = parseInt(matchA[1], 10) - parseInt(matchB[1], 10);\n\n                        if (numComparison !== 0) {\n                            return numComparison;\n                        }\n\n                        const romanComparison = romanToNumber(matchA[3]) - romanToNumber(matchB[3]);\n\n                        if (romanComparison !== 0) {\n                            return romanComparison;\n                        }\n\n                        return matchA[2].localeCompare(matchB[2], 'en', { sensitivity: 'base' });\n                    } else {\n                        return 0;\n                    }\n                } else {\n                    const comparison = valueA.localeCompare(valueB, 'en', { sensitivity: 'base' });\n\n                    if (comparison !== 0) {\n                        return comparison;\n                    }\n                }\n            }\n            return 0;\n        });\n\n        return sortedData;\n    };\n\n\n\n    useEffect(() => {\n        const runCSharpScript = async () => {\n            try {\n                console.log('Sending a POST request to run C# script...');\n\n                const response = await fetch(url + 'runCSharpScript', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n                console.log('Server response received:', response);\n\n                if (!response.ok) {\n                    console.error('Failed to run C# script on the server. HTTP status:', response.status);\n                    throw new Error('Failed to run C# script on the server');\n                }\n\n                const JsonData = await response.text(); // Get the raw text response\n\n                const jsonData = JSON.parse(JsonData); // Parse the cleaned JSON string\n\n                let dataArray = JSON.parse(jsonData.data);\n\n                // Заполняем пропуски в свойстве \"date\"\n                for (let i = 0; i < dataArray.length; i++) {\n                    if (dataArray[i].date === null || dataArray[i].date === \"\") {\n                        dataArray[i].date = dataArray[i - 1].date;\n                    }\n                }\n\n                // Удаляем элементы, у которых все свойства (кроме \"date\") пусты\n                dataArray = dataArray.filter(item => {\n                    if (item.subst_person === \"\" || item.subst_person === \"nav stundas\")\n                        return false; // Все свойства (кроме \"date\") пусты, удаляем элемент\n                    return true;\n                });\n\n                const filteredData = filterDataByCurrentDate(dataArray, currentDate);\n\n                console.log('C# script executed successfully. Data from the server:', filteredData);\n                setSpreadsheetData(filteredData);\n            } catch (error) {\n                console.error('Error running C# script:', error);\n            }\n        };\n\n\n        // Вызываем функцию для отправки POST-запроса\n        runCSharpScript();\n\n        const intervalId = setInterval(() => {\n            updateCurrentTime();\n            updateCurrentDateLV();\n            updateCurrentDate();\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [updateCurrentDate, updateCurrentDateLV, updateCurrentTime, setSpreadsheetData, currentDate]);\n\n\n    const totalPages = Math.ceil(spreadsheetData.length / itemsPerPage);\n\n    const renderPageNumbers = () => {\n        const pageNumbers = [];\n\n        for (let i = 1; i <= totalPages + photoList.length; i++) {\n            if (photoList[i - totalPages - 1] !== \"logo.png\") {\r\n                pageNumbers.push(\r\n                    <PageButton\r\n                        key={i}\r\n                        onClick={() => paginate(i)}\r\n                        isActive={i === currentPage}\r\n                    />\r\n                );\r\n            }\n        }\n\n        return pageNumbers;\n    };\n\n\n    const paginate = (pageNumber) => {\n        setCurrentPage(pageNumber);\r\n        if (pageNumber > totalPages)\r\n            console.log(`Clicked on photo page ${pageNumber}`);\r\n    };\n\n    const filterDataByCurrentDate = (data, currentDate) => {\n        return data.filter(item => {\n            const itemDate = item.date;\n            return itemDate === currentDate;\n        });\n    };\n\n    const sortedFilteredData = sortData(spreadsheetData, ['subst_person', 'lesson', 'class', 'lesson_room', 'graduated_teacher', 'notes']);\n\n    return (\n        <div>\n            <h1>{currentTime}</h1>\n            <h2>AIZVIETOŠANAS LAPA</h2>\n            <h3>{currentDateLV}</h3>\n                \n                {renderContent()}\n                {/*\n                    <input\n                        type=\"number\"\n                        id=\"itemsPerPage\"\n                        onChange={handleItemsPerPageChange}\n                        placeholder=\"Items per page...\"\n                        min=\"1\"\n                        className=\"itemsPerPageInput\"\n                    />\n                */}\n                <div className=\"paginationContainer\">\n                    {renderPageNumbers()}\n                </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}