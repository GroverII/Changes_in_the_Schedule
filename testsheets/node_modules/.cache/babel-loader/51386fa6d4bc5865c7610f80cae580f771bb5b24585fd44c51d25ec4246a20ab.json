{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\AdminConsole.js\",\n  _s = $RefreshSig$();\n/* global google */\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminConsole = () => {\n  _s();\n  const [login, setLogin] = useState('');\n  const [password, setPassword] = useState('');\n  const [loggedInData, setLoggedInData] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n    script.onload = () => {\n      // Библиотека загружена, теперь можно вызвать handleChooseColumns\n      console.log('Google API script loaded.');\n    };\n    document.head.appendChild(script);\n  }, []);\n  const handleLogin = async () => {\n    // Отправляем запрос на сервер для проверки логина и пароля\n    try {\n      const response = await fetch('http://localhost:3001/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          login,\n          password\n        })\n      });\n      if (!response.ok) {\n        console.error('Authentication failed. HTTP status:', response.status);\n        // Обработка ошибки аутентификации\n        return;\n      }\n      const data = await response.json();\n      setLoggedInData(data);\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  const handleRunCSharpScript = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/runCSharpScript', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        console.error('Failed to run C# script on the server. HTTP status:', response.status);\n        throw new Error('Failed to run C# script on the server');\n      }\n      const jsonData = await response.json();\n      if (!jsonData.data.trim()) {\n        console.error('Empty response data received from the server.');\n        return;\n      }\n      console.log('Raw server response data:', jsonData.data);\n      let dataArray;\n      try {\n        dataArray = JSON.parse(jsonData.data);\n      } catch (parseError) {\n        console.error('Error parsing JSON data:', parseError);\n        return;\n      }\n      if (!Array.isArray(dataArray)) {\n        console.error('Data is not an array:', dataArray);\n        return;\n      }\n      console.log('Parsed server response data:', dataArray);\n      const ws = XLSX.utils.json_to_sheet(dataArray);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, 'data.xlsx');\n    } catch (error) {\n      console.error('Error during C# script execution:', error);\n    }\n  };\n  const handleChooseColumns = () => {\n    if (window.google && window.google.picker) {\n      const picker = new window.google.picker.PickerBuilder().addView(new window.google.picker.DocsView(window.google.picker.ViewId.SPREADSHEETS)).setOAuthToken(loggedInData.accessToken).setCallback(data => {\n        if (data.action === window.google.picker.Action.PICKED) {\n          const doc = data.docs[0];\n          const spreadsheetId = doc.id;\n\n          // Prompt user for column selection (mocked with prompts)\n          const columns = [prompt('Select Datums column:'), prompt('Select Aizvietotājs column:'), prompt('Select Stunda column:'), prompt('Select Klase column:'), prompt('Select Kab. column:'), prompt('Select Promesošais skolotājs column:'), prompt('Select Piezīmes column:')];\n          if (spreadsheetId && columns.every(column => column !== null && column !== undefined)) {\n            console.log('Selected Spreadsheet ID:', spreadsheetId);\n            console.log('Selected columns:', columns);\n          }\n        }\n      }).build();\n      picker.setVisible(true);\n    } else {\n      console.error('Google API not loaded yet. Please wait and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"login\",\n          children: \"Login:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"login\",\n          value: login,\n          onChange: e => setLogin(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunCSharpScript,\n        children: \"Run C# Script\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleChooseColumns,\n        children: \"Choose Columns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminConsole, \"H4j7GlIGFvU0rfPu+1ZibaxPHNM=\");\n_c = AdminConsole;\nexport default AdminConsole;\nvar _c;\n$RefreshReg$(_c, \"AdminConsole\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminConsole","_s","login","setLogin","password","setPassword","loggedInData","setLoggedInData","isLoggedIn","setIsLoggedIn","script","document","createElement","src","onload","console","log","head","appendChild","handleLogin","response","fetch","method","headers","body","JSON","stringify","ok","error","status","data","json","handleRunCSharpScript","Error","jsonData","trim","dataArray","parse","parseError","Array","isArray","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","handleChooseColumns","window","google","picker","PickerBuilder","addView","DocsView","ViewId","SPREADSHEETS","setOAuthToken","accessToken","setCallback","action","Action","PICKED","doc","docs","spreadsheetId","id","columns","prompt","every","column","undefined","build","setVisible","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/AdminConsole.js"],"sourcesContent":["/* global google */\r\nimport React, { useState, useEffect } from 'react';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst AdminConsole = () => {\r\n    const [login, setLogin] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loggedInData, setLoggedInData] = useState(null);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://apis.google.com/js/api.js';\r\n        script.onload = () => {\r\n            // Библиотека загружена, теперь можно вызвать handleChooseColumns\r\n            console.log('Google API script loaded.');\r\n        };\r\n        document.head.appendChild(script);\r\n    }, []);\r\n\r\n    const handleLogin = async () => {\r\n        // Отправляем запрос на сервер для проверки логина и пароля\r\n        try {\r\n            const response = await fetch('http://localhost:3001/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ login, password }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Authentication failed. HTTP status:', response.status);\r\n                // Обработка ошибки аутентификации\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoggedInData(data);\r\n            setIsLoggedIn(true);\r\n        } catch (error) {\r\n            console.error('Error during login:', error);\r\n        }\r\n    };\r\n\r\n    const handleRunCSharpScript = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/runCSharpScript', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Failed to run C# script on the server. HTTP status:', response.status);\r\n                throw new Error('Failed to run C# script on the server');\r\n            }\r\n\r\n            const jsonData = await response.json();\r\n\r\n            if (!jsonData.data.trim()) {\r\n                console.error('Empty response data received from the server.');\r\n                return;\r\n            }\r\n\r\n            console.log('Raw server response data:', jsonData.data);\r\n\r\n            let dataArray;\r\n\r\n            try {\r\n                dataArray = JSON.parse(jsonData.data);\r\n            } catch (parseError) {\r\n                console.error('Error parsing JSON data:', parseError);\r\n                return;\r\n            }\r\n\r\n            if (!Array.isArray(dataArray)) {\r\n                console.error('Data is not an array:', dataArray);\r\n                return;\r\n            }\r\n\r\n            console.log('Parsed server response data:', dataArray);\r\n\r\n            const ws = XLSX.utils.json_to_sheet(dataArray);\r\n            const wb = XLSX.utils.book_new();\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n            XLSX.writeFile(wb, 'data.xlsx');\r\n        } catch (error) {\r\n            console.error('Error during C# script execution:', error);\r\n        }\r\n    };\r\n\r\n    const handleChooseColumns = () => {\r\n        if (window.google && window.google.picker) {\r\n            const picker = new window.google.picker.PickerBuilder()\r\n                .addView(new window.google.picker.DocsView(window.google.picker.ViewId.SPREADSHEETS))\r\n                .setOAuthToken(loggedInData.accessToken)\r\n                .setCallback((data) => {\r\n                    if (data.action === window.google.picker.Action.PICKED) {\r\n                        const doc = data.docs[0];\r\n                        const spreadsheetId = doc.id;\r\n\r\n                        // Prompt user for column selection (mocked with prompts)\r\n                        const columns = [\r\n                            prompt('Select Datums column:'),\r\n                            prompt('Select Aizvietotājs column:'),\r\n                            prompt('Select Stunda column:'),\r\n                            prompt('Select Klase column:'),\r\n                            prompt('Select Kab. column:'),\r\n                            prompt('Select Promesošais skolotājs column:'),\r\n                            prompt('Select Piezīmes column:'),\r\n                        ];\r\n\r\n                        if (spreadsheetId && columns.every(column => column !== null && column !== undefined)) {\r\n                            console.log('Selected Spreadsheet ID:', spreadsheetId);\r\n                            console.log('Selected columns:', columns);\r\n                        }\r\n                    }\r\n                })\r\n                .build();\r\n\r\n            picker.setVisible(true);\r\n        } else {\r\n            console.error('Google API not loaded yet. Please wait and try again.');\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!isLoggedIn && (\r\n                <>\r\n                    <div>\r\n                        <label htmlFor=\"login\">Login:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"login\"\r\n                            value={login}\r\n                            onChange={(e) => setLogin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"password\">Password:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <button onClick={handleLogin}>Enter</button>\r\n                </>\r\n            )}\r\n\r\n            {isLoggedIn && (\r\n                <div>\r\n                    {/* Button to run C# script */}\r\n                    <button onClick={handleRunCSharpScript}>Run C# Script</button>\r\n\r\n                    {/* Button to choose columns */}\r\n                    <button onClick={handleChooseColumns}>Choose Columns</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminConsole;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}