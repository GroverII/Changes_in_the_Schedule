{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\testsheets\\\\src\\\\AdminConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style_adm.css';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminConsole = () => {\n  _s();\n  const [login, setLogin] = useState('');\n  const [password, setPassword] = useState('');\n  const [loggedInData, setLoggedInData] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [excelData, setExcelData] = useState(null);\n  const [selectedCell, setSelectedCell] = useState({\n    row: null,\n    col: null\n  });\n  const [config, setConfig] = useState({});\n  const [newConfig, setNewConfig] = useState({});\n  const [newCSConfig, setNewCSConfig] = useState({});\n  const [csharpScriptConfig, setCSharpScriptConfig] = useState({});\n  const url = 'http://localhost:3001/';\n  const [activeTab, setActiveTab] = useState(null);\n  const handleTabClick = tab => {\n    setActiveTab(tab);\n  };\n  const handleLogin = async () => {\n    // Отправляем запрос на сервер для проверки логина и пароля\n    try {\n      const response = await fetch(url + 'login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          login,\n          password\n        })\n      });\n      if (!response.ok) {\n        console.error('Authentication failed. HTTP status:', response.status);\n        // Обработка ошибки аутентификации\n        return;\n      }\n      const data = await response.json();\n      setLoggedInData(data);\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  const handleRunCSharpScript = async () => {\n    try {\n      const response = await fetch(url + 'runCSharpScript', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        console.error('Failed to run C# script on the server. HTTP status:', response.status);\n        throw new Error('Failed to run C# script on the server');\n      }\n      const jsonData = await response.json();\n      if (!jsonData.data.trim()) {\n        console.error('Empty response data received from the server.');\n        return;\n      }\n      console.log('Raw server response data:', jsonData.data);\n      let dataArray;\n      try {\n        dataArray = JSON.parse(jsonData.data);\n      } catch (parseError) {\n        console.error('Error parsing JSON data:', parseError);\n        return;\n      }\n      if (!Array.isArray(dataArray)) {\n        console.error('Data is not an array:', dataArray);\n        return;\n      }\n      console.log('Parsed server response data:', dataArray);\n      const ws = XLSX.utils.json_to_sheet(dataArray);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, 'data.xlsx');\n    } catch (error) {\n      console.error('Error during C# script execution:', error);\n    }\n  };\n  const handleUpdateConfig = async () => {\n    try {\n      const updates = Object.entries(newConfig).map(([key, value]) => ({\n        key,\n        value\n      }));\n      const response = await fetch(url + 'updateConfig', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) {\n        console.error('Failed to update configuration. HTTP status:', response.status);\n        throw new Error('Failed to update configuration');\n      }\n      const updateResponse = await response.json();\n      if (updateResponse.success) {\n        console.log('Configuration updated successfully. Old value:', updateResponse.oldValue);\n        getConfig();\n      } else {\n        console.error('Failed to update configuration. Server response:', updateResponse);\n      }\n    } catch (error) {\n      console.error('Error updating configuration:', error);\n    }\n  };\n  const handleInputChange = (key, value) => {\n    setNewConfig(prevConfig => ({\n      ...prevConfig,\n      [key]: value\n    }));\n  };\n  useEffect(() => {\n    // Вызывается при монтировании компонента\n    getConfig(); // Получаем конфигурацию при загрузке\n    getCSharpScriptConfig();\n  }, []);\n  const getConfig = async () => {\n    try {\n      const response = await fetch(url + 'getConfig');\n      if (!response.ok) {\n        console.error('Failed to fetch configuration. HTTP status:', response.status);\n        return;\n      }\n      const data = await response.json();\n      setConfig(data.config);\n    } catch (error) {\n      console.error('Error fetching configuration:', error);\n    }\n  };\n  const handleUpdateCSharpScriptConfig = async () => {\n    try {\n      const updates = Object.entries(newCSConfig).map(([key, value]) => ({\n        key,\n        value\n      }));\n      console.log(updates);\n      const response = await fetch(url + 'updateCSharpScriptConfig', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) {\n        console.error('Failed to update C# script configuration. HTTP status:', response.status);\n        throw new Error('Failed to update C# script configuration');\n      }\n      const updateResponses = await response.json(); // Обратите внимание на \"s\" в конце\n\n      updateResponses.forEach(updateResponse => {\n        if (updateResponse.success) {\n          console.log(`C# script configuration updated successfully. Old value: ${updateResponse.oldValue}`);\n        } else {\n          console.error('Failed to update C# script configuration. Server response:', updateResponse);\n        }\n      });\n      getCSharpScriptConfig();\n    } catch (error) {\n      console.error('Error updating C# script configuration:', error);\n    }\n  };\n  const getCSharpScriptConfig = async () => {\n    try {\n      const response = await fetch(url + 'getCSharpScriptConfig');\n      if (!response.ok) {\n        console.error('Failed to fetch C# Script configuration. HTTP status:', response.status);\n        return;\n      }\n      const data = await response.json();\n      // Сохранение данных в состоянии React\n      setCSharpScriptConfig(data);\n    } catch (error) {\n      console.error('Error fetching C# Script configuration:', error);\n    }\n  };\n  const handleInputChangeCSConfig = (key, value) => {\n    setNewCSConfig(prevConfig => ({\n      ...prevConfig,\n      [key]: value\n    }));\n  };\n  const AizvietosanasTab = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Aizvieto\\u0161anas Tab Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 16\n    }, this);\n  };\n\n  // Компонент для таба \"Attēli\"\n  const AtteliTab = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Att\\u0113li Tab Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 16\n    }, this);\n  };\n\n  // Компонент для таба \"Iestatījumi\"\n  const IestatijumiTab = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Iestat\\u012Bjumi Tab Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 16\n    }, this);\n  };\n\n  //unused\n  const handleLoadExcel = async () => {\n    try {\n      const response = await fetch('https://docs.google.com/spreadsheets/d/1MBboSLNI-avCAJ7RZPeJKL-JPIuFY4H9eBoq3W18Qao/export?format=xlsx');\n      const blob = await response.blob();\n      const reader = new FileReader();\n      reader.onload = async e => {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, {\n          type: 'binary'\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[firstSheetName], {\n          defval: ''\n        });\n        if (Array.isArray(sheetData) && sheetData.length > 0) {\n          const formattedData = [Object.keys(sheetData[0]), ...sheetData.map(row => Object.values(row))];\n          console.log('Formatted Excel Data:', formattedData);\n          setExcelData(formattedData);\n        } else {\n          console.error('Invalid Excel data format.');\n        }\n      };\n      reader.readAsBinaryString(blob);\n    } catch (error) {\n      console.error('Error loading Excel file:', error);\n    }\n  };\n  const handleCellClick = (rowIndex, colIndex) => {\n    setSelectedCell({\n      row: rowIndex,\n      col: colIndex\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"login\",\n            children: \"Login:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"login\",\n            value: login,\n            onChange: e => setLogin(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogin,\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this)\n    }, void 0, false), isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTabClick('aizvietosanas'),\n        className: activeTab === 'aizvietosanas' ? 'active-tab' : '',\n        children: \"Aizvieto\\u0161anas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTabClick('atteli'),\n        className: activeTab === 'atteli' ? 'active-tab' : '',\n        children: \"Att\\u0113li\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTabClick('iestatijumi'),\n        className: activeTab === 'iestatijumi' ? 'active-tab' : '',\n        children: \"Iestat\\u012Bjumi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 21\n      }, this), activeTab === 'aizvietosanas' && /*#__PURE__*/_jsxDEV(AizvietosanasTab, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 55\n      }, this), activeTab === 'atteli' && /*#__PURE__*/_jsxDEV(AtteliTab, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 48\n      }, this), activeTab === 'iestatijumi' && /*#__PURE__*/_jsxDEV(IestatijumiTab, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminConsole, \"7D9WhP44bwD68F/iCwwR0FryyZI=\");\n_c = AdminConsole;\nexport default AdminConsole;\nvar _c;\n$RefreshReg$(_c, \"AdminConsole\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminConsole","_s","login","setLogin","password","setPassword","loggedInData","setLoggedInData","isLoggedIn","setIsLoggedIn","excelData","setExcelData","selectedCell","setSelectedCell","row","col","config","setConfig","newConfig","setNewConfig","newCSConfig","setNewCSConfig","csharpScriptConfig","setCSharpScriptConfig","url","activeTab","setActiveTab","handleTabClick","tab","handleLogin","response","fetch","method","headers","body","JSON","stringify","ok","console","error","status","data","json","handleRunCSharpScript","Error","jsonData","trim","log","dataArray","parse","parseError","Array","isArray","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","handleUpdateConfig","updates","Object","entries","map","key","value","updateResponse","success","oldValue","getConfig","handleInputChange","prevConfig","getCSharpScriptConfig","handleUpdateCSharpScriptConfig","updateResponses","forEach","handleInputChangeCSConfig","AizvietosanasTab","children","fileName","_jsxFileName","lineNumber","columnNumber","AtteliTab","IestatijumiTab","handleLoadExcel","blob","reader","FileReader","onload","e","target","result","workbook","read","type","firstSheetName","SheetNames","sheetData","sheet_to_json","Sheets","defval","length","formattedData","keys","values","readAsBinaryString","handleCellClick","rowIndex","colIndex","className","htmlFor","id","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/testsheets/src/AdminConsole.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './style_adm.css';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst AdminConsole = () => {\r\n    const [login, setLogin] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loggedInData, setLoggedInData] = useState(null);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [excelData, setExcelData] = useState(null);\r\n    const [selectedCell, setSelectedCell] = useState({ row: null, col: null });\r\n    const [config, setConfig] = useState({});\r\n    const [newConfig, setNewConfig] = useState({});\r\n    const [newCSConfig, setNewCSConfig] = useState({});\r\n    const [csharpScriptConfig, setCSharpScriptConfig] = useState({});\r\n    const url = 'http://localhost:3001/';\r\n    const [activeTab, setActiveTab] = useState(null);\r\n\r\n    const handleTabClick = (tab) => {\r\n        setActiveTab(tab);\r\n    };\r\n\r\n    const handleLogin = async () => {\r\n        // Отправляем запрос на сервер для проверки логина и пароля\r\n        try {\r\n            const response = await fetch(url + 'login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ login, password }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Authentication failed. HTTP status:', response.status);\r\n                // Обработка ошибки аутентификации\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoggedInData(data);\r\n            setIsLoggedIn(true);\r\n        } catch (error) {\r\n            console.error('Error during login:', error);\r\n        }\r\n    };\r\n\r\n    const handleRunCSharpScript = async () => {\r\n        try {\r\n            const response = await fetch(url + 'runCSharpScript', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Failed to run C# script on the server. HTTP status:', response.status);\r\n                throw new Error('Failed to run C# script on the server');\r\n            }\r\n\r\n            const jsonData = await response.json();\r\n\r\n            if (!jsonData.data.trim()) {\r\n                console.error('Empty response data received from the server.');\r\n                return;\r\n            }\r\n\r\n            console.log('Raw server response data:', jsonData.data);\r\n\r\n            let dataArray;\r\n\r\n            try {\r\n                dataArray = JSON.parse(jsonData.data);\r\n            } catch (parseError) {\r\n                console.error('Error parsing JSON data:', parseError);\r\n                return;\r\n            }\r\n\r\n            if (!Array.isArray(dataArray)) {\r\n                console.error('Data is not an array:', dataArray);\r\n                return;\r\n            }\r\n\r\n            console.log('Parsed server response data:', dataArray);\r\n\r\n            const ws = XLSX.utils.json_to_sheet(dataArray);\r\n            const wb = XLSX.utils.book_new();\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n            XLSX.writeFile(wb, 'data.xlsx');\r\n        } catch (error) {\r\n            console.error('Error during C# script execution:', error);\r\n        }\r\n    };\r\n\r\n    const handleUpdateConfig = async () => {\r\n        try {\r\n            const updates = Object.entries(newConfig).map(([key, value]) => ({ key, value }));\r\n\r\n            const response = await fetch(url + 'updateConfig', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updates),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Failed to update configuration. HTTP status:', response.status);\r\n                throw new Error('Failed to update configuration');\r\n            }\r\n\r\n            const updateResponse = await response.json();\r\n\r\n            if (updateResponse.success) {\r\n                console.log('Configuration updated successfully. Old value:', updateResponse.oldValue);\r\n                getConfig();\r\n            } else {\r\n                console.error('Failed to update configuration. Server response:', updateResponse);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Error updating configuration:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleInputChange = (key, value) => {\r\n        setNewConfig((prevConfig) => ({\r\n            ...prevConfig,\r\n            [key]: value,\r\n        }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Вызывается при монтировании компонента\r\n        getConfig(); // Получаем конфигурацию при загрузке\r\n        getCSharpScriptConfig();\r\n    }, []);\r\n\r\n    const getConfig = async () => {\r\n        try {\r\n            const response = await fetch(url + 'getConfig');\r\n            if (!response.ok) {\r\n                console.error('Failed to fetch configuration. HTTP status:', response.status);\r\n                return;\r\n            }\r\n            const data = await response.json();\r\n            setConfig(data.config);\r\n        } catch (error) {\r\n            console.error('Error fetching configuration:', error);\r\n        }\r\n    };\r\n\r\n    const handleUpdateCSharpScriptConfig = async () => {\r\n        try {\r\n            const updates = Object.entries(newCSConfig).map(([key, value]) => ({ key, value }));\r\n            console.log(updates);\r\n            const response = await fetch(url + 'updateCSharpScriptConfig', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updates),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Failed to update C# script configuration. HTTP status:', response.status);\r\n                throw new Error('Failed to update C# script configuration');\r\n            }\r\n\r\n            const updateResponses = await response.json(); // Обратите внимание на \"s\" в конце\r\n\r\n            updateResponses.forEach(updateResponse => {\r\n                if (updateResponse.success) {\r\n                    console.log(`C# script configuration updated successfully. Old value: ${updateResponse.oldValue}`);\r\n                } else {\r\n                    console.error('Failed to update C# script configuration. Server response:', updateResponse);\r\n                }\r\n            });\r\n\r\n            getCSharpScriptConfig();\r\n\r\n        } catch (error) {\r\n            console.error('Error updating C# script configuration:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const getCSharpScriptConfig = async () => {\r\n        try {\r\n            const response = await fetch(url + 'getCSharpScriptConfig');\r\n            if (!response.ok) {\r\n                console.error('Failed to fetch C# Script configuration. HTTP status:', response.status);\r\n                return;\r\n            }\r\n            const data = await response.json();\r\n            // Сохранение данных в состоянии React\r\n            setCSharpScriptConfig(data);\r\n        } catch (error) {\r\n            console.error('Error fetching C# Script configuration:', error);\r\n        }\r\n    };\r\n\r\n    const handleInputChangeCSConfig = (key, value) => {\r\n        setNewCSConfig((prevConfig) => ({\r\n            ...prevConfig,\r\n            [key]: value,\r\n        }));\r\n    };\r\n\r\n    const AizvietosanasTab = () => {\r\n        return <div>Aizvietošanas Tab Content</div>;\r\n    };\r\n\r\n    // Компонент для таба \"Attēli\"\r\n    const AtteliTab = () => {\r\n        return <div>Attēli Tab Content</div>;\r\n    };\r\n\r\n    // Компонент для таба \"Iestatījumi\"\r\n    const IestatijumiTab = () => {\r\n        return <div>Iestatījumi Tab Content</div>;\r\n    };\r\n\r\n    //unused\r\n    const handleLoadExcel = async () => {\r\n        try {\r\n            const response = await fetch('https://docs.google.com/spreadsheets/d/1MBboSLNI-avCAJ7RZPeJKL-JPIuFY4H9eBoq3W18Qao/export?format=xlsx');\r\n            const blob = await response.blob();\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = async (e) => {\r\n                const data = e.target.result;\r\n                const workbook = XLSX.read(data, { type: 'binary' });\r\n                const firstSheetName = workbook.SheetNames[0];\r\n                const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[firstSheetName], { defval: '' });\r\n\r\n                if (Array.isArray(sheetData) && sheetData.length > 0) {\r\n                    const formattedData = [Object.keys(sheetData[0]), ...sheetData.map(row => Object.values(row))];\r\n                    console.log('Formatted Excel Data:', formattedData);\r\n                    setExcelData(formattedData);\r\n                } else {\r\n                    console.error('Invalid Excel data format.');\r\n                }\r\n            };\r\n\r\n            reader.readAsBinaryString(blob);\r\n        } catch (error) {\r\n            console.error('Error loading Excel file:', error);\r\n        }\r\n    };\r\n    const handleCellClick = (rowIndex, colIndex) => {\r\n        setSelectedCell({ row: rowIndex, col: colIndex });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!isLoggedIn && (\r\n                <>\r\n                    <div className=\"admin-form\">\r\n                        <div>\r\n                            <label htmlFor=\"login\">Login:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"login\"\r\n                                value={login}\r\n                                onChange={(e) => setLogin(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"password\">Password:</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <button onClick={handleLogin}>Enter</button>\r\n                    </div>\r\n                </>\r\n            )}\r\n            {isLoggedIn && (\r\n                <div>\r\n                    <button\r\n                        onClick={() => handleTabClick('aizvietosanas')}\r\n                        className={activeTab === 'aizvietosanas' ? 'active-tab' : ''}\r\n                    >\r\n                        Aizvietošanas\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => handleTabClick('atteli')}\r\n                        className={activeTab === 'atteli' ? 'active-tab' : ''}\r\n                    >\r\n                        Attēli\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => handleTabClick('iestatijumi')}\r\n                        className={activeTab === 'iestatijumi' ? 'active-tab' : ''}\r\n                    >\r\n                        Iestatījumi\r\n                    </button>\r\n\r\n                    {/* Отображение контента в зависимости от активного таба */}\r\n                    {activeTab === 'aizvietosanas' && <AizvietosanasTab />}\r\n                    {activeTab === 'atteli' && <AtteliTab />}\r\n                    {activeTab === 'iestatijumi' && <IestatijumiTab />}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminConsole;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}